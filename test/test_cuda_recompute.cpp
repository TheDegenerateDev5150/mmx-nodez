/*
 * test_cuda_recompute.cpp
 *
 *  Created on: Feb 5, 2025
 *      Author: mad
 */

#include <mmx/utils.h>
#include <mmx/pos/cuda_recompute.h>

#include <vnx/vnx.h>

using namespace mmx;
using namespace mmx::pos;


int main(int argc, char** argv)
{
	std::map<std::string, std::string> options;
	options["C"] = "clevel";
	options["N"] = "count";
	options["devices"] = "list";

	vnx::init("test_cuda_recompute", argc, argv, options);

	int count = 1;
	int clevel = 0;
	std::vector<int> device_list;
	vnx::read_config("count", count);
	vnx::read_config("clevel", clevel);
	vnx::read_config("devices", device_list);

	cuda_recompute_init(true, device_list);

	const auto list = get_cuda_devices_used();
	for(const auto& dev : list) {
		std::cout << "Using [" << dev.index << "] " << dev.name << " with buffer size " << dev.buffer_size << std::endl;
	}

	int ksize = 29;
	hash_t plot_id;
	std::vector<uint32_t> x_values;
	vnx::from_string("8FA05447F4F0849B7875E0D0D25B99360F8A7981C67DE7CA5FCF1E1483089F82", plot_id);
	vnx::from_string("[41526030, 190034280, 27487774, 360531876, 157328122, 533344899, 348912715, 158286857, 500512399, 286789283, 309409411, 33301427, 291496595, 292537, 431952279, 209584997, 111041179, 225686812, 377306265, 45918619, 136492725, 443847657, 63762825, 455772217, 299457809, 62819158, 423066079, 70184667, 116121877, 262069313, 94597380, 277096972, 178726801, 264024912, 497654815, 81149636, 201256170, 209529847, 86228594, 32668245, 122504482, 174029193, 404468875, 222875439, 241585134, 438378901, 310806690, 77808852, 506242593, 337807442, 171130081, 360833911, 483590771, 498133539, 78329797, 41557646, 163327753, 315798381, 131747531, 361264561, 216455451, 179665178, 51870911, 429035183, 295349671, 152798101, 253786116, 433103191, 476044027, 346642880, 47227825, 208846273, 206436033, 245874067, 427075796, 180779200, 410970246, 1143092, 50889398, 224426279, 375125060, 188487454, 319636984, 272259131, 377087291, 271901983, 531636482, 454874007, 274228377, 431843070, 523612467, 361408983, 423618927, 339345523, 86142409, 160801159, 22024508, 233678781, 241239177, 475088783, 400172747, 362038581, 429952975, 121634389, 179032692, 152394426, 223298082, 93030597, 63400229, 175256560, 530644023, 21993664, 153789041, 515107385, 135370091, 156498932, 72211704, 400919262, 136383461, 504380151, 239462247, 184409768, 245564618, 264419588, 183760152, 303573155, 280701899, 412267540, 281366400, 318612884, 281199257, 28786199, 280595286, 469254350, 516006656, 76648711, 534052766, 109825608, 383408610, 400602196, 201747007, 232103494, 225366639, 473932026, 373853689, 523521134, 385137715, 297896772, 460856009, 253065215, 191027004, 302714203, 102745112, 118857551, 531336719, 298547044, 308312588, 441150850, 177353289, 366287353, 117270343, 323760640, 436125237, 193628024, 496102441, 192425221, 174984738, 267393617, 119828474, 382207855, 157357834, 102830320, 69524625, 32453159, 470198640, 253550250, 12023423, 143563219, 38100930, 259685561, 358040000, 277554148, 502359901, 375665759, 268245745, 193785837, 21177576, 97132723, 237830009, 390049154, 424082856, 287383135, 482999386, 93334862, 211737164, 32954960, 379554381, 329067393, 322071582, 452967760, 223523925, 394112637, 91770475, 33515598, 41541163, 159354561, 448723432, 360714676, 298810627, 463092740, 8253330, 416722492, 172191294, 358486549, 286025427, 260690064, 290924466, 157109118, 14568701, 256902937, 225155064, 507728616, 21730277, 31804253, 365161673, 184388967, 36778686, 241694509, 71357500, 429209559, 275960351, 244822214, 345055770, 122399096, 93423247, 5590085, 299893246, 386457316, 300993063, 533350058, 313848074, 106703937, 516682805, 49602142, 321158224, 265493627, 329208949, 45211675, 112966538, 523299896, 80915641, 499055347, 124794444, 78543398, 155955534, 393135459]", x_values);

	for(auto& x : x_values) {
		x >>= clevel;
	}

	const auto time_begin = get_time_ms();

	std::set<uint64_t> jobs;
	for(int i = 0; i < count; ++i) {
		const auto id = cuda_recompute(ksize, clevel, plot_id, x_values);
		jobs.insert(id);
	}

	while(!jobs.empty()) {
		const auto res = cuda_recompute_poll(jobs);
		if(res->failed) {
			std::cout << "[" << res->id << "] failed with: " << res->error << std::endl;
		} else {
			for(const auto& entry : res->entries) {
				std::cout << "[" << res->id << "] Y = " << entry.first << std::endl;
				std::cout << "[" << res->id << "] M = " << entry.second.to_string() << std::endl;
			}
		}
		jobs.erase(res->id);
	}

	std::cout << "Took " << get_time_ms() - time_begin << " ms" << std::endl;

	cuda_recompute_shutdown();

	vnx::close();

	return 0;
}

