
// AUTO GENERATED by vnxcppcodegen

#include <mmx/Block.hxx>
#include <mmx/BlockHeader.hxx>
#include <mmx/ChainParams.hxx>
#include <mmx/Challenge.hxx>
#include <mmx/Contract.hxx>
#include <mmx/FarmInfo.hxx>
#include <mmx/FarmerBase.hxx>
#include <mmx/Farmer_get_farm_info.hxx>
#include <mmx/Farmer_get_farm_info_return.hxx>
#include <mmx/Farmer_get_farmer_keys.hxx>
#include <mmx/Farmer_get_farmer_keys_return.hxx>
#include <mmx/Farmer_get_mac_addr.hxx>
#include <mmx/Farmer_get_mac_addr_return.hxx>
#include <mmx/Farmer_get_partial_diff.hxx>
#include <mmx/Farmer_get_partial_diff_return.hxx>
#include <mmx/Farmer_get_partial_diffs.hxx>
#include <mmx/Farmer_get_partial_diffs_return.hxx>
#include <mmx/Farmer_sign_block.hxx>
#include <mmx/Farmer_sign_block_return.hxx>
#include <mmx/Farmer_sign_vote.hxx>
#include <mmx/Farmer_sign_vote_return.hxx>
#include <mmx/HarvesterBase.hxx>
#include <mmx/Harvester_add_plot_dir.hxx>
#include <mmx/Harvester_add_plot_dir_return.hxx>
#include <mmx/Harvester_get_farm_info.hxx>
#include <mmx/Harvester_get_farm_info_return.hxx>
#include <mmx/Harvester_get_total_bytes.hxx>
#include <mmx/Harvester_get_total_bytes_return.hxx>
#include <mmx/Harvester_reload.hxx>
#include <mmx/Harvester_reload_return.hxx>
#include <mmx/Harvester_rem_plot_dir.hxx>
#include <mmx/Harvester_rem_plot_dir_return.hxx>
#include <mmx/IntervalRequest.hxx>
#include <mmx/KeyFile.hxx>
#include <mmx/LookupInfo.hxx>
#include <mmx/NetworkInfo.hxx>
#include <mmx/NodeBase.hxx>
#include <mmx/Node_add_block.hxx>
#include <mmx/Node_add_block_return.hxx>
#include <mmx/Node_add_transaction.hxx>
#include <mmx/Node_add_transaction_return.hxx>
#include <mmx/Node_call_contract.hxx>
#include <mmx/Node_call_contract_return.hxx>
#include <mmx/Node_dump_storage.hxx>
#include <mmx/Node_dump_storage_return.hxx>
#include <mmx/Node_fetch_offers.hxx>
#include <mmx/Node_fetch_offers_return.hxx>
#include <mmx/Node_get_all_balances.hxx>
#include <mmx/Node_get_all_balances_return.hxx>
#include <mmx/Node_get_balance.hxx>
#include <mmx/Node_get_balance_return.hxx>
#include <mmx/Node_get_balances.hxx>
#include <mmx/Node_get_balances_return.hxx>
#include <mmx/Node_get_block.hxx>
#include <mmx/Node_get_block_return.hxx>
#include <mmx/Node_get_block_at.hxx>
#include <mmx/Node_get_block_at_return.hxx>
#include <mmx/Node_get_block_hash.hxx>
#include <mmx/Node_get_block_hash_return.hxx>
#include <mmx/Node_get_block_hash_ex.hxx>
#include <mmx/Node_get_block_hash_ex_return.hxx>
#include <mmx/Node_get_contract.hxx>
#include <mmx/Node_get_contract_return.hxx>
#include <mmx/Node_get_contract_balances.hxx>
#include <mmx/Node_get_contract_balances_return.hxx>
#include <mmx/Node_get_contract_for.hxx>
#include <mmx/Node_get_contract_for_return.hxx>
#include <mmx/Node_get_contracts.hxx>
#include <mmx/Node_get_contracts_return.hxx>
#include <mmx/Node_get_contracts_by.hxx>
#include <mmx/Node_get_contracts_by_return.hxx>
#include <mmx/Node_get_contracts_owned_by.hxx>
#include <mmx/Node_get_contracts_owned_by_return.hxx>
#include <mmx/Node_get_exec_history.hxx>
#include <mmx/Node_get_exec_history_return.hxx>
#include <mmx/Node_get_farmed_block_summary.hxx>
#include <mmx/Node_get_farmed_block_summary_return.hxx>
#include <mmx/Node_get_farmed_blocks.hxx>
#include <mmx/Node_get_farmed_blocks_return.hxx>
#include <mmx/Node_get_farmer_ranking.hxx>
#include <mmx/Node_get_farmer_ranking_return.hxx>
#include <mmx/Node_get_genesis_hash.hxx>
#include <mmx/Node_get_genesis_hash_return.hxx>
#include <mmx/Node_get_header.hxx>
#include <mmx/Node_get_header_return.hxx>
#include <mmx/Node_get_header_at.hxx>
#include <mmx/Node_get_header_at_return.hxx>
#include <mmx/Node_get_height.hxx>
#include <mmx/Node_get_height_return.hxx>
#include <mmx/Node_get_history.hxx>
#include <mmx/Node_get_history_return.hxx>
#include <mmx/Node_get_history_memo.hxx>
#include <mmx/Node_get_history_memo_return.hxx>
#include <mmx/Node_get_network_info.hxx>
#include <mmx/Node_get_network_info_return.hxx>
#include <mmx/Node_get_offer.hxx>
#include <mmx/Node_get_offer_return.hxx>
#include <mmx/Node_get_offers.hxx>
#include <mmx/Node_get_offers_return.hxx>
#include <mmx/Node_get_offers_by.hxx>
#include <mmx/Node_get_offers_by_return.hxx>
#include <mmx/Node_get_params.hxx>
#include <mmx/Node_get_params_return.hxx>
#include <mmx/Node_get_plot_nft_info.hxx>
#include <mmx/Node_get_plot_nft_info_return.hxx>
#include <mmx/Node_get_plot_nft_target.hxx>
#include <mmx/Node_get_plot_nft_target_return.hxx>
#include <mmx/Node_get_recent_offers.hxx>
#include <mmx/Node_get_recent_offers_return.hxx>
#include <mmx/Node_get_recent_offers_for.hxx>
#include <mmx/Node_get_recent_offers_for_return.hxx>
#include <mmx/Node_get_swap_equivalent_liquidity.hxx>
#include <mmx/Node_get_swap_equivalent_liquidity_return.hxx>
#include <mmx/Node_get_swap_fees_earned.hxx>
#include <mmx/Node_get_swap_fees_earned_return.hxx>
#include <mmx/Node_get_swap_history.hxx>
#include <mmx/Node_get_swap_history_return.hxx>
#include <mmx/Node_get_swap_info.hxx>
#include <mmx/Node_get_swap_info_return.hxx>
#include <mmx/Node_get_swap_liquidity_by.hxx>
#include <mmx/Node_get_swap_liquidity_by_return.hxx>
#include <mmx/Node_get_swap_trade_estimate.hxx>
#include <mmx/Node_get_swap_trade_estimate_return.hxx>
#include <mmx/Node_get_swap_user_info.hxx>
#include <mmx/Node_get_swap_user_info_return.hxx>
#include <mmx/Node_get_swaps.hxx>
#include <mmx/Node_get_swaps_return.hxx>
#include <mmx/Node_get_synced_height.hxx>
#include <mmx/Node_get_synced_height_return.hxx>
#include <mmx/Node_get_synced_vdf_height.hxx>
#include <mmx/Node_get_synced_vdf_height_return.hxx>
#include <mmx/Node_get_total_balance.hxx>
#include <mmx/Node_get_total_balance_return.hxx>
#include <mmx/Node_get_total_balances.hxx>
#include <mmx/Node_get_total_balances_return.hxx>
#include <mmx/Node_get_total_supply.hxx>
#include <mmx/Node_get_total_supply_return.hxx>
#include <mmx/Node_get_trade_history.hxx>
#include <mmx/Node_get_trade_history_return.hxx>
#include <mmx/Node_get_trade_history_for.hxx>
#include <mmx/Node_get_trade_history_for_return.hxx>
#include <mmx/Node_get_transaction.hxx>
#include <mmx/Node_get_transaction_return.hxx>
#include <mmx/Node_get_transactions.hxx>
#include <mmx/Node_get_transactions_return.hxx>
#include <mmx/Node_get_tx_height.hxx>
#include <mmx/Node_get_tx_height_return.hxx>
#include <mmx/Node_get_tx_ids.hxx>
#include <mmx/Node_get_tx_ids_return.hxx>
#include <mmx/Node_get_tx_ids_at.hxx>
#include <mmx/Node_get_tx_ids_at_return.hxx>
#include <mmx/Node_get_tx_ids_since.hxx>
#include <mmx/Node_get_tx_ids_since_return.hxx>
#include <mmx/Node_get_tx_info.hxx>
#include <mmx/Node_get_tx_info_return.hxx>
#include <mmx/Node_get_tx_info_for.hxx>
#include <mmx/Node_get_tx_info_for_return.hxx>
#include <mmx/Node_get_vdf_height.hxx>
#include <mmx/Node_get_vdf_height_return.hxx>
#include <mmx/Node_get_vdf_peak.hxx>
#include <mmx/Node_get_vdf_peak_return.hxx>
#include <mmx/Node_read_storage.hxx>
#include <mmx/Node_read_storage_return.hxx>
#include <mmx/Node_read_storage_array.hxx>
#include <mmx/Node_read_storage_array_return.hxx>
#include <mmx/Node_read_storage_entry_addr.hxx>
#include <mmx/Node_read_storage_entry_addr_return.hxx>
#include <mmx/Node_read_storage_entry_string.hxx>
#include <mmx/Node_read_storage_entry_string_return.hxx>
#include <mmx/Node_read_storage_entry_var.hxx>
#include <mmx/Node_read_storage_entry_var_return.hxx>
#include <mmx/Node_read_storage_field.hxx>
#include <mmx/Node_read_storage_field_return.hxx>
#include <mmx/Node_read_storage_map.hxx>
#include <mmx/Node_read_storage_map_return.hxx>
#include <mmx/Node_read_storage_object.hxx>
#include <mmx/Node_read_storage_object_return.hxx>
#include <mmx/Node_read_storage_var.hxx>
#include <mmx/Node_read_storage_var_return.hxx>
#include <mmx/Node_revert_sync.hxx>
#include <mmx/Node_revert_sync_return.hxx>
#include <mmx/Node_start_sync.hxx>
#include <mmx/Node_start_sync_return.hxx>
#include <mmx/Node_validate.hxx>
#include <mmx/Node_validate_return.hxx>
#include <mmx/Node_verify_partial.hxx>
#include <mmx/Node_verify_partial_return.hxx>
#include <mmx/Node_verify_plot_nft_target.hxx>
#include <mmx/Node_verify_plot_nft_target_return.hxx>
#include <mmx/Operation.hxx>
#include <mmx/Partial.hxx>
#include <mmx/PeerInfo.hxx>
#include <mmx/PlotHeader.hxx>
#include <mmx/ProofOfSpace.hxx>
#include <mmx/ProofOfSpaceNFT.hxx>
#include <mmx/ProofOfSpaceOG.hxx>
#include <mmx/ProofOfTime.hxx>
#include <mmx/ProofResponse.hxx>
#include <mmx/ReceiveNote.hxx>
#include <mmx/Request.hxx>
#include <mmx/Return.hxx>
#include <mmx/RouterBase.hxx>
#include <mmx/Router_discover.hxx>
#include <mmx/Router_discover_return.hxx>
#include <mmx/Router_fetch_block.hxx>
#include <mmx/Router_fetch_block_return.hxx>
#include <mmx/Router_fetch_block_at.hxx>
#include <mmx/Router_fetch_block_at_return.hxx>
#include <mmx/Router_get_blocks_at.hxx>
#include <mmx/Router_get_blocks_at_return.hxx>
#include <mmx/Router_get_connected_peers.hxx>
#include <mmx/Router_get_connected_peers_return.hxx>
#include <mmx/Router_get_id.hxx>
#include <mmx/Router_get_id_return.hxx>
#include <mmx/Router_get_info.hxx>
#include <mmx/Router_get_info_return.hxx>
#include <mmx/Router_get_known_peers.hxx>
#include <mmx/Router_get_known_peers_return.hxx>
#include <mmx/Router_get_peer_info.hxx>
#include <mmx/Router_get_peer_info_return.hxx>
#include <mmx/Router_get_peers.hxx>
#include <mmx/Router_get_peers_return.hxx>
#include <mmx/Router_kick_peer.hxx>
#include <mmx/Router_kick_peer_return.hxx>
#include <mmx/Router_sign_msg.hxx>
#include <mmx/Router_sign_msg_return.hxx>
#include <mmx/Solution.hxx>
#include <mmx/TimeLordBase.hxx>
#include <mmx/TimeLord_stop_vdf.hxx>
#include <mmx/TimeLord_stop_vdf_return.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/TransactionBase.hxx>
#include <mmx/VDF_Point.hxx>
#include <mmx/ValidatorVote.hxx>
#include <mmx/WalletBase.hxx>
#include <mmx/Wallet_accept_offer.hxx>
#include <mmx/Wallet_accept_offer_return.hxx>
#include <mmx/Wallet_add_account.hxx>
#include <mmx/Wallet_add_account_return.hxx>
#include <mmx/Wallet_add_token.hxx>
#include <mmx/Wallet_add_token_return.hxx>
#include <mmx/Wallet_cancel_offer.hxx>
#include <mmx/Wallet_cancel_offer_return.hxx>
#include <mmx/Wallet_complete.hxx>
#include <mmx/Wallet_complete_return.hxx>
#include <mmx/Wallet_create_account.hxx>
#include <mmx/Wallet_create_account_return.hxx>
#include <mmx/Wallet_create_wallet.hxx>
#include <mmx/Wallet_create_wallet_return.hxx>
#include <mmx/Wallet_deploy.hxx>
#include <mmx/Wallet_deploy_return.hxx>
#include <mmx/Wallet_deposit.hxx>
#include <mmx/Wallet_deposit_return.hxx>
#include <mmx/Wallet_execute.hxx>
#include <mmx/Wallet_execute_return.hxx>
#include <mmx/Wallet_export_wallet.hxx>
#include <mmx/Wallet_export_wallet_return.hxx>
#include <mmx/Wallet_find_wallet_by_addr.hxx>
#include <mmx/Wallet_find_wallet_by_addr_return.hxx>
#include <mmx/Wallet_gather_inputs_for.hxx>
#include <mmx/Wallet_gather_inputs_for_return.hxx>
#include <mmx/Wallet_get_account.hxx>
#include <mmx/Wallet_get_account_return.hxx>
#include <mmx/Wallet_get_address.hxx>
#include <mmx/Wallet_get_address_return.hxx>
#include <mmx/Wallet_get_all_accounts.hxx>
#include <mmx/Wallet_get_all_accounts_return.hxx>
#include <mmx/Wallet_get_all_addresses.hxx>
#include <mmx/Wallet_get_all_addresses_return.hxx>
#include <mmx/Wallet_get_all_farmer_keys.hxx>
#include <mmx/Wallet_get_all_farmer_keys_return.hxx>
#include <mmx/Wallet_get_balance.hxx>
#include <mmx/Wallet_get_balance_return.hxx>
#include <mmx/Wallet_get_balances.hxx>
#include <mmx/Wallet_get_balances_return.hxx>
#include <mmx/Wallet_get_contract_balances.hxx>
#include <mmx/Wallet_get_contract_balances_return.hxx>
#include <mmx/Wallet_get_contracts.hxx>
#include <mmx/Wallet_get_contracts_return.hxx>
#include <mmx/Wallet_get_contracts_owned.hxx>
#include <mmx/Wallet_get_contracts_owned_return.hxx>
#include <mmx/Wallet_get_farmer_keys.hxx>
#include <mmx/Wallet_get_farmer_keys_return.hxx>
#include <mmx/Wallet_get_history.hxx>
#include <mmx/Wallet_get_history_return.hxx>
#include <mmx/Wallet_get_history_memo.hxx>
#include <mmx/Wallet_get_history_memo_return.hxx>
#include <mmx/Wallet_get_master_seed.hxx>
#include <mmx/Wallet_get_master_seed_return.hxx>
#include <mmx/Wallet_get_mnemonic_seed.hxx>
#include <mmx/Wallet_get_mnemonic_seed_return.hxx>
#include <mmx/Wallet_get_mnemonic_wordlist.hxx>
#include <mmx/Wallet_get_mnemonic_wordlist_return.hxx>
#include <mmx/Wallet_get_offers.hxx>
#include <mmx/Wallet_get_offers_return.hxx>
#include <mmx/Wallet_get_swap_liquidity.hxx>
#include <mmx/Wallet_get_swap_liquidity_return.hxx>
#include <mmx/Wallet_get_token_list.hxx>
#include <mmx/Wallet_get_token_list_return.hxx>
#include <mmx/Wallet_get_total_balances.hxx>
#include <mmx/Wallet_get_total_balances_return.hxx>
#include <mmx/Wallet_get_tx_log.hxx>
#include <mmx/Wallet_get_tx_log_return.hxx>
#include <mmx/Wallet_import_wallet.hxx>
#include <mmx/Wallet_import_wallet_return.hxx>
#include <mmx/Wallet_is_locked.hxx>
#include <mmx/Wallet_is_locked_return.hxx>
#include <mmx/Wallet_lock.hxx>
#include <mmx/Wallet_lock_return.hxx>
#include <mmx/Wallet_make_offer.hxx>
#include <mmx/Wallet_make_offer_return.hxx>
#include <mmx/Wallet_mark_spent.hxx>
#include <mmx/Wallet_mark_spent_return.hxx>
#include <mmx/Wallet_offer_trade.hxx>
#include <mmx/Wallet_offer_trade_return.hxx>
#include <mmx/Wallet_offer_withdraw.hxx>
#include <mmx/Wallet_offer_withdraw_return.hxx>
#include <mmx/Wallet_plotnft_create.hxx>
#include <mmx/Wallet_plotnft_create_return.hxx>
#include <mmx/Wallet_plotnft_exec.hxx>
#include <mmx/Wallet_plotnft_exec_return.hxx>
#include <mmx/Wallet_release.hxx>
#include <mmx/Wallet_release_return.hxx>
#include <mmx/Wallet_release_all.hxx>
#include <mmx/Wallet_release_all_return.hxx>
#include <mmx/Wallet_rem_token.hxx>
#include <mmx/Wallet_rem_token_return.hxx>
#include <mmx/Wallet_remove_account.hxx>
#include <mmx/Wallet_remove_account_return.hxx>
#include <mmx/Wallet_reserve.hxx>
#include <mmx/Wallet_reserve_return.hxx>
#include <mmx/Wallet_reset_cache.hxx>
#include <mmx/Wallet_reset_cache_return.hxx>
#include <mmx/Wallet_send.hxx>
#include <mmx/Wallet_send_return.hxx>
#include <mmx/Wallet_send_from.hxx>
#include <mmx/Wallet_send_from_return.hxx>
#include <mmx/Wallet_send_many.hxx>
#include <mmx/Wallet_send_many_return.hxx>
#include <mmx/Wallet_send_off.hxx>
#include <mmx/Wallet_send_off_return.hxx>
#include <mmx/Wallet_set_address_count.hxx>
#include <mmx/Wallet_set_address_count_return.hxx>
#include <mmx/Wallet_sign_msg.hxx>
#include <mmx/Wallet_sign_msg_return.hxx>
#include <mmx/Wallet_sign_off.hxx>
#include <mmx/Wallet_sign_off_return.hxx>
#include <mmx/Wallet_swap_add_liquid.hxx>
#include <mmx/Wallet_swap_add_liquid_return.hxx>
#include <mmx/Wallet_swap_rem_liquid.hxx>
#include <mmx/Wallet_swap_rem_liquid_return.hxx>
#include <mmx/Wallet_swap_trade.hxx>
#include <mmx/Wallet_swap_trade_return.hxx>
#include <mmx/Wallet_unlock.hxx>
#include <mmx/Wallet_unlock_return.hxx>
#include <mmx/Wallet_update_cache.hxx>
#include <mmx/Wallet_update_cache_return.hxx>
#include <mmx/WalletFile.hxx>
#include <mmx/WebAPIBase.hxx>
#include <mmx/WebAPI_shutdown.hxx>
#include <mmx/WebAPI_shutdown_return.hxx>
#include <mmx/account_info_t.hxx>
#include <mmx/account_t.hxx>
#include <mmx/balance_t.hxx>
#include <mmx/block_index_t.hxx>
#include <mmx/compile_flags_t.hxx>
#include <mmx/error_code_e.hxx>
#include <mmx/exec_entry_t.hxx>
#include <mmx/exec_error_t.hxx>
#include <mmx/exec_result_t.hxx>
#include <mmx/farmed_block_info_t.hxx>
#include <mmx/farmed_block_summary_t.hxx>
#include <mmx/node_info_t.hxx>
#include <mmx/node_type_e.hxx>
#include <mmx/offer_data_t.hxx>
#include <mmx/peer_info_t.hxx>
#include <mmx/permission_e.hxx>
#include <mmx/plot_nft_info_t.hxx>
#include <mmx/pooling_error_e.hxx>
#include <mmx/pooling_info_t.hxx>
#include <mmx/pooling_stats_t.hxx>
#include <mmx/query_filter_t.hxx>
#include <mmx/spend_options_t.hxx>
#include <mmx/swap_entry_t.hxx>
#include <mmx/swap_info_t.hxx>
#include <mmx/swap_pool_info_t.hxx>
#include <mmx/swap_user_info_t.hxx>
#include <mmx/trade_entry_t.hxx>
#include <mmx/trade_log_t.hxx>
#include <mmx/tx_entry_t.hxx>
#include <mmx/tx_index_t.hxx>
#include <mmx/tx_info_t.hxx>
#include <mmx/tx_log_entry_t.hxx>
#include <mmx/tx_note_e.hxx>
#include <mmx/tx_type_e.hxx>
#include <mmx/txin_t.hxx>
#include <mmx/txio_entry_t.hxx>
#include <mmx/txio_t.hxx>
#include <mmx/txout_t.hxx>
#include <mmx/uint_fraction_t.hxx>
#include <mmx/ulong_fraction_t.hxx>
#include <mmx/virtual_plot_info_t.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/fixed128.hpp>
#include <mmx/hash_512_t.hpp>
#include <mmx/hash_t.hpp>
#include <mmx/pubkey_t.hpp>
#include <mmx/signature_t.hpp>
#include <mmx/skey_t.hpp>
#include <mmx/uint128.hpp>

#include <mmx/package.hxx>
#include <vnx/vnx.h>



namespace vnx {

const TypeCode* type<::mmx::Block>::get_type_code() {
	return mmx::vnx_native_type_code_Block;
}

void type<::mmx::Block>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Block());
}

void type<::mmx::Block>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Block& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::BlockHeader>::get_type_code() {
	return mmx::vnx_native_type_code_BlockHeader;
}

void type<::mmx::BlockHeader>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::BlockHeader());
}

void type<::mmx::BlockHeader>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::BlockHeader& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::ChainParams>::get_type_code() {
	return mmx::vnx_native_type_code_ChainParams;
}

void type<::mmx::ChainParams>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ChainParams());
}

void type<::mmx::ChainParams>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ChainParams& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Challenge>::get_type_code() {
	return mmx::vnx_native_type_code_Challenge;
}

void type<::mmx::Challenge>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Challenge());
}

void type<::mmx::Challenge>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Challenge& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Contract>::get_type_code() {
	return mmx::vnx_native_type_code_Contract;
}

void type<::mmx::Contract>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Contract());
}

void type<::mmx::Contract>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Contract& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::FarmInfo>::get_type_code() {
	return mmx::vnx_native_type_code_FarmInfo;
}

void type<::mmx::FarmInfo>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::FarmInfo());
}

void type<::mmx::FarmInfo>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::FarmInfo& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_get_farm_info>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_get_farm_info;
}

void type<::mmx::Farmer_get_farm_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_farm_info());
}

void type<::mmx::Farmer_get_farm_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_farm_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_get_farm_info_return>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_get_farm_info_return;
}

void type<::mmx::Farmer_get_farm_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_farm_info_return());
}

void type<::mmx::Farmer_get_farm_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_farm_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_get_farmer_keys>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_get_farmer_keys;
}

void type<::mmx::Farmer_get_farmer_keys>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_farmer_keys());
}

void type<::mmx::Farmer_get_farmer_keys>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_farmer_keys& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_get_farmer_keys_return>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_get_farmer_keys_return;
}

void type<::mmx::Farmer_get_farmer_keys_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_farmer_keys_return());
}

void type<::mmx::Farmer_get_farmer_keys_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_farmer_keys_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_get_mac_addr>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_get_mac_addr;
}

void type<::mmx::Farmer_get_mac_addr>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_mac_addr());
}

void type<::mmx::Farmer_get_mac_addr>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_mac_addr& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_get_mac_addr_return>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_get_mac_addr_return;
}

void type<::mmx::Farmer_get_mac_addr_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_mac_addr_return());
}

void type<::mmx::Farmer_get_mac_addr_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_mac_addr_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_get_partial_diff>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_get_partial_diff;
}

void type<::mmx::Farmer_get_partial_diff>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_partial_diff());
}

void type<::mmx::Farmer_get_partial_diff>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_partial_diff& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_get_partial_diff_return>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_get_partial_diff_return;
}

void type<::mmx::Farmer_get_partial_diff_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_partial_diff_return());
}

void type<::mmx::Farmer_get_partial_diff_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_partial_diff_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_get_partial_diffs>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_get_partial_diffs;
}

void type<::mmx::Farmer_get_partial_diffs>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_partial_diffs());
}

void type<::mmx::Farmer_get_partial_diffs>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_partial_diffs& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_get_partial_diffs_return>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_get_partial_diffs_return;
}

void type<::mmx::Farmer_get_partial_diffs_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_partial_diffs_return());
}

void type<::mmx::Farmer_get_partial_diffs_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_partial_diffs_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_sign_block>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_sign_block;
}

void type<::mmx::Farmer_sign_block>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_sign_block());
}

void type<::mmx::Farmer_sign_block>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_sign_block& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_sign_block_return>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_sign_block_return;
}

void type<::mmx::Farmer_sign_block_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_sign_block_return());
}

void type<::mmx::Farmer_sign_block_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_sign_block_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_sign_vote>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_sign_vote;
}

void type<::mmx::Farmer_sign_vote>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_sign_vote());
}

void type<::mmx::Farmer_sign_vote>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_sign_vote& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Farmer_sign_vote_return>::get_type_code() {
	return mmx::vnx_native_type_code_Farmer_sign_vote_return;
}

void type<::mmx::Farmer_sign_vote_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_sign_vote_return());
}

void type<::mmx::Farmer_sign_vote_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_sign_vote_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Harvester_add_plot_dir>::get_type_code() {
	return mmx::vnx_native_type_code_Harvester_add_plot_dir;
}

void type<::mmx::Harvester_add_plot_dir>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_add_plot_dir());
}

void type<::mmx::Harvester_add_plot_dir>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_add_plot_dir& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Harvester_add_plot_dir_return>::get_type_code() {
	return mmx::vnx_native_type_code_Harvester_add_plot_dir_return;
}

void type<::mmx::Harvester_add_plot_dir_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_add_plot_dir_return());
}

void type<::mmx::Harvester_add_plot_dir_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_add_plot_dir_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Harvester_get_farm_info>::get_type_code() {
	return mmx::vnx_native_type_code_Harvester_get_farm_info;
}

void type<::mmx::Harvester_get_farm_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_get_farm_info());
}

void type<::mmx::Harvester_get_farm_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_farm_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Harvester_get_farm_info_return>::get_type_code() {
	return mmx::vnx_native_type_code_Harvester_get_farm_info_return;
}

void type<::mmx::Harvester_get_farm_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_get_farm_info_return());
}

void type<::mmx::Harvester_get_farm_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_farm_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Harvester_get_total_bytes>::get_type_code() {
	return mmx::vnx_native_type_code_Harvester_get_total_bytes;
}

void type<::mmx::Harvester_get_total_bytes>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_get_total_bytes());
}

void type<::mmx::Harvester_get_total_bytes>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_total_bytes& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Harvester_get_total_bytes_return>::get_type_code() {
	return mmx::vnx_native_type_code_Harvester_get_total_bytes_return;
}

void type<::mmx::Harvester_get_total_bytes_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_get_total_bytes_return());
}

void type<::mmx::Harvester_get_total_bytes_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_total_bytes_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Harvester_reload>::get_type_code() {
	return mmx::vnx_native_type_code_Harvester_reload;
}

void type<::mmx::Harvester_reload>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_reload());
}

void type<::mmx::Harvester_reload>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_reload& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Harvester_reload_return>::get_type_code() {
	return mmx::vnx_native_type_code_Harvester_reload_return;
}

void type<::mmx::Harvester_reload_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_reload_return());
}

void type<::mmx::Harvester_reload_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_reload_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Harvester_rem_plot_dir>::get_type_code() {
	return mmx::vnx_native_type_code_Harvester_rem_plot_dir;
}

void type<::mmx::Harvester_rem_plot_dir>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_rem_plot_dir());
}

void type<::mmx::Harvester_rem_plot_dir>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_rem_plot_dir& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Harvester_rem_plot_dir_return>::get_type_code() {
	return mmx::vnx_native_type_code_Harvester_rem_plot_dir_return;
}

void type<::mmx::Harvester_rem_plot_dir_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_rem_plot_dir_return());
}

void type<::mmx::Harvester_rem_plot_dir_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_rem_plot_dir_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::IntervalRequest>::get_type_code() {
	return mmx::vnx_native_type_code_IntervalRequest;
}

void type<::mmx::IntervalRequest>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::IntervalRequest());
}

void type<::mmx::IntervalRequest>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::IntervalRequest& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::KeyFile>::get_type_code() {
	return mmx::vnx_native_type_code_KeyFile;
}

void type<::mmx::KeyFile>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::KeyFile());
}

void type<::mmx::KeyFile>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::KeyFile& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::LookupInfo>::get_type_code() {
	return mmx::vnx_native_type_code_LookupInfo;
}

void type<::mmx::LookupInfo>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::LookupInfo());
}

void type<::mmx::LookupInfo>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::LookupInfo& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::NetworkInfo>::get_type_code() {
	return mmx::vnx_native_type_code_NetworkInfo;
}

void type<::mmx::NetworkInfo>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::NetworkInfo());
}

void type<::mmx::NetworkInfo>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::NetworkInfo& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_add_block>::get_type_code() {
	return mmx::vnx_native_type_code_Node_add_block;
}

void type<::mmx::Node_add_block>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_add_block());
}

void type<::mmx::Node_add_block>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_block& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_add_block_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_add_block_return;
}

void type<::mmx::Node_add_block_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_add_block_return());
}

void type<::mmx::Node_add_block_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_block_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_add_transaction>::get_type_code() {
	return mmx::vnx_native_type_code_Node_add_transaction;
}

void type<::mmx::Node_add_transaction>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_add_transaction());
}

void type<::mmx::Node_add_transaction>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_transaction& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_add_transaction_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_add_transaction_return;
}

void type<::mmx::Node_add_transaction_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_add_transaction_return());
}

void type<::mmx::Node_add_transaction_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_transaction_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_call_contract>::get_type_code() {
	return mmx::vnx_native_type_code_Node_call_contract;
}

void type<::mmx::Node_call_contract>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_call_contract());
}

void type<::mmx::Node_call_contract>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_call_contract& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_call_contract_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_call_contract_return;
}

void type<::mmx::Node_call_contract_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_call_contract_return());
}

void type<::mmx::Node_call_contract_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_call_contract_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_dump_storage>::get_type_code() {
	return mmx::vnx_native_type_code_Node_dump_storage;
}

void type<::mmx::Node_dump_storage>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_dump_storage());
}

void type<::mmx::Node_dump_storage>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_dump_storage& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_dump_storage_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_dump_storage_return;
}

void type<::mmx::Node_dump_storage_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_dump_storage_return());
}

void type<::mmx::Node_dump_storage_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_dump_storage_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_fetch_offers>::get_type_code() {
	return mmx::vnx_native_type_code_Node_fetch_offers;
}

void type<::mmx::Node_fetch_offers>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_fetch_offers());
}

void type<::mmx::Node_fetch_offers>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_fetch_offers& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_fetch_offers_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_fetch_offers_return;
}

void type<::mmx::Node_fetch_offers_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_fetch_offers_return());
}

void type<::mmx::Node_fetch_offers_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_fetch_offers_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_all_balances>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_all_balances;
}

void type<::mmx::Node_get_all_balances>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_all_balances());
}

void type<::mmx::Node_get_all_balances>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_all_balances& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_all_balances_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_all_balances_return;
}

void type<::mmx::Node_get_all_balances_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_all_balances_return());
}

void type<::mmx::Node_get_all_balances_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_all_balances_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_balance>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_balance;
}

void type<::mmx::Node_get_balance>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_balance());
}

void type<::mmx::Node_get_balance>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_balance& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_balance_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_balance_return;
}

void type<::mmx::Node_get_balance_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_balance_return());
}

void type<::mmx::Node_get_balance_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_balance_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_balances>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_balances;
}

void type<::mmx::Node_get_balances>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_balances());
}

void type<::mmx::Node_get_balances>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_balances& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_balances_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_balances_return;
}

void type<::mmx::Node_get_balances_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_balances_return());
}

void type<::mmx::Node_get_balances_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_balances_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_block>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_block;
}

void type<::mmx::Node_get_block>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block());
}

void type<::mmx::Node_get_block>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_block_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_block_return;
}

void type<::mmx::Node_get_block_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_return());
}

void type<::mmx::Node_get_block_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_block_at>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_block_at;
}

void type<::mmx::Node_get_block_at>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_at());
}

void type<::mmx::Node_get_block_at>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_at& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_block_at_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_block_at_return;
}

void type<::mmx::Node_get_block_at_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_at_return());
}

void type<::mmx::Node_get_block_at_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_at_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_block_hash>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_block_hash;
}

void type<::mmx::Node_get_block_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_hash());
}

void type<::mmx::Node_get_block_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_block_hash_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_block_hash_return;
}

void type<::mmx::Node_get_block_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_hash_return());
}

void type<::mmx::Node_get_block_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_block_hash_ex>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_block_hash_ex;
}

void type<::mmx::Node_get_block_hash_ex>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_hash_ex());
}

void type<::mmx::Node_get_block_hash_ex>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_hash_ex& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_block_hash_ex_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_block_hash_ex_return;
}

void type<::mmx::Node_get_block_hash_ex_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_hash_ex_return());
}

void type<::mmx::Node_get_block_hash_ex_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_hash_ex_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contract>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contract;
}

void type<::mmx::Node_get_contract>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contract());
}

void type<::mmx::Node_get_contract>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contract& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contract_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contract_return;
}

void type<::mmx::Node_get_contract_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contract_return());
}

void type<::mmx::Node_get_contract_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contract_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contract_balances>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contract_balances;
}

void type<::mmx::Node_get_contract_balances>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contract_balances());
}

void type<::mmx::Node_get_contract_balances>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contract_balances& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contract_balances_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contract_balances_return;
}

void type<::mmx::Node_get_contract_balances_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contract_balances_return());
}

void type<::mmx::Node_get_contract_balances_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contract_balances_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contract_for>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contract_for;
}

void type<::mmx::Node_get_contract_for>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contract_for());
}

void type<::mmx::Node_get_contract_for>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contract_for& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contract_for_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contract_for_return;
}

void type<::mmx::Node_get_contract_for_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contract_for_return());
}

void type<::mmx::Node_get_contract_for_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contract_for_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contracts>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contracts;
}

void type<::mmx::Node_get_contracts>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contracts());
}

void type<::mmx::Node_get_contracts>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contracts& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contracts_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contracts_return;
}

void type<::mmx::Node_get_contracts_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contracts_return());
}

void type<::mmx::Node_get_contracts_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contracts_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contracts_by>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contracts_by;
}

void type<::mmx::Node_get_contracts_by>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contracts_by());
}

void type<::mmx::Node_get_contracts_by>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contracts_by& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contracts_by_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contracts_by_return;
}

void type<::mmx::Node_get_contracts_by_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contracts_by_return());
}

void type<::mmx::Node_get_contracts_by_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contracts_by_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contracts_owned_by>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contracts_owned_by;
}

void type<::mmx::Node_get_contracts_owned_by>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contracts_owned_by());
}

void type<::mmx::Node_get_contracts_owned_by>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contracts_owned_by& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_contracts_owned_by_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_contracts_owned_by_return;
}

void type<::mmx::Node_get_contracts_owned_by_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contracts_owned_by_return());
}

void type<::mmx::Node_get_contracts_owned_by_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contracts_owned_by_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_exec_history>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_exec_history;
}

void type<::mmx::Node_get_exec_history>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_exec_history());
}

void type<::mmx::Node_get_exec_history>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_exec_history& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_exec_history_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_exec_history_return;
}

void type<::mmx::Node_get_exec_history_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_exec_history_return());
}

void type<::mmx::Node_get_exec_history_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_exec_history_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_farmed_block_summary>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_farmed_block_summary;
}

void type<::mmx::Node_get_farmed_block_summary>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_farmed_block_summary());
}

void type<::mmx::Node_get_farmed_block_summary>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_farmed_block_summary& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_farmed_block_summary_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_farmed_block_summary_return;
}

void type<::mmx::Node_get_farmed_block_summary_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_farmed_block_summary_return());
}

void type<::mmx::Node_get_farmed_block_summary_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_farmed_block_summary_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_farmed_blocks>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_farmed_blocks;
}

void type<::mmx::Node_get_farmed_blocks>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_farmed_blocks());
}

void type<::mmx::Node_get_farmed_blocks>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_farmed_blocks& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_farmed_blocks_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_farmed_blocks_return;
}

void type<::mmx::Node_get_farmed_blocks_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_farmed_blocks_return());
}

void type<::mmx::Node_get_farmed_blocks_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_farmed_blocks_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_farmer_ranking>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_farmer_ranking;
}

void type<::mmx::Node_get_farmer_ranking>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_farmer_ranking());
}

void type<::mmx::Node_get_farmer_ranking>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_farmer_ranking& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_farmer_ranking_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_farmer_ranking_return;
}

void type<::mmx::Node_get_farmer_ranking_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_farmer_ranking_return());
}

void type<::mmx::Node_get_farmer_ranking_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_farmer_ranking_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_genesis_hash>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_genesis_hash;
}

void type<::mmx::Node_get_genesis_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_genesis_hash());
}

void type<::mmx::Node_get_genesis_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_genesis_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_genesis_hash_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_genesis_hash_return;
}

void type<::mmx::Node_get_genesis_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_genesis_hash_return());
}

void type<::mmx::Node_get_genesis_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_genesis_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_header>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_header;
}

void type<::mmx::Node_get_header>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_header());
}

void type<::mmx::Node_get_header>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_header& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_header_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_header_return;
}

void type<::mmx::Node_get_header_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_header_return());
}

void type<::mmx::Node_get_header_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_header_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_header_at>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_header_at;
}

void type<::mmx::Node_get_header_at>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_header_at());
}

void type<::mmx::Node_get_header_at>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_header_at& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_header_at_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_header_at_return;
}

void type<::mmx::Node_get_header_at_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_header_at_return());
}

void type<::mmx::Node_get_header_at_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_header_at_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_height>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_height;
}

void type<::mmx::Node_get_height>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_height());
}

void type<::mmx::Node_get_height>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_height& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_height_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_height_return;
}

void type<::mmx::Node_get_height_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_height_return());
}

void type<::mmx::Node_get_height_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_height_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_history>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_history;
}

void type<::mmx::Node_get_history>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_history());
}

void type<::mmx::Node_get_history>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_history& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_history_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_history_return;
}

void type<::mmx::Node_get_history_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_history_return());
}

void type<::mmx::Node_get_history_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_history_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_history_memo>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_history_memo;
}

void type<::mmx::Node_get_history_memo>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_history_memo());
}

void type<::mmx::Node_get_history_memo>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_history_memo& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_history_memo_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_history_memo_return;
}

void type<::mmx::Node_get_history_memo_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_history_memo_return());
}

void type<::mmx::Node_get_history_memo_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_history_memo_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_network_info>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_network_info;
}

void type<::mmx::Node_get_network_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_network_info());
}

void type<::mmx::Node_get_network_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_network_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_network_info_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_network_info_return;
}

void type<::mmx::Node_get_network_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_network_info_return());
}

void type<::mmx::Node_get_network_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_network_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_offer>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_offer;
}

void type<::mmx::Node_get_offer>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_offer());
}

void type<::mmx::Node_get_offer>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_offer& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_offer_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_offer_return;
}

void type<::mmx::Node_get_offer_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_offer_return());
}

void type<::mmx::Node_get_offer_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_offer_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_offers>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_offers;
}

void type<::mmx::Node_get_offers>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_offers());
}

void type<::mmx::Node_get_offers>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_offers& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_offers_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_offers_return;
}

void type<::mmx::Node_get_offers_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_offers_return());
}

void type<::mmx::Node_get_offers_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_offers_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_offers_by>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_offers_by;
}

void type<::mmx::Node_get_offers_by>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_offers_by());
}

void type<::mmx::Node_get_offers_by>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_offers_by& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_offers_by_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_offers_by_return;
}

void type<::mmx::Node_get_offers_by_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_offers_by_return());
}

void type<::mmx::Node_get_offers_by_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_offers_by_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_params>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_params;
}

void type<::mmx::Node_get_params>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_params());
}

void type<::mmx::Node_get_params>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_params& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_params_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_params_return;
}

void type<::mmx::Node_get_params_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_params_return());
}

void type<::mmx::Node_get_params_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_params_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_plot_nft_info>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_plot_nft_info;
}

void type<::mmx::Node_get_plot_nft_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_plot_nft_info());
}

void type<::mmx::Node_get_plot_nft_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_plot_nft_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_plot_nft_info_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_plot_nft_info_return;
}

void type<::mmx::Node_get_plot_nft_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_plot_nft_info_return());
}

void type<::mmx::Node_get_plot_nft_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_plot_nft_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_plot_nft_target>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_plot_nft_target;
}

void type<::mmx::Node_get_plot_nft_target>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_plot_nft_target());
}

void type<::mmx::Node_get_plot_nft_target>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_plot_nft_target& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_plot_nft_target_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_plot_nft_target_return;
}

void type<::mmx::Node_get_plot_nft_target_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_plot_nft_target_return());
}

void type<::mmx::Node_get_plot_nft_target_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_plot_nft_target_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_recent_offers>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_recent_offers;
}

void type<::mmx::Node_get_recent_offers>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_recent_offers());
}

void type<::mmx::Node_get_recent_offers>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_recent_offers& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_recent_offers_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_recent_offers_return;
}

void type<::mmx::Node_get_recent_offers_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_recent_offers_return());
}

void type<::mmx::Node_get_recent_offers_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_recent_offers_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_recent_offers_for>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_recent_offers_for;
}

void type<::mmx::Node_get_recent_offers_for>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_recent_offers_for());
}

void type<::mmx::Node_get_recent_offers_for>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_recent_offers_for& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_recent_offers_for_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_recent_offers_for_return;
}

void type<::mmx::Node_get_recent_offers_for_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_recent_offers_for_return());
}

void type<::mmx::Node_get_recent_offers_for_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_recent_offers_for_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_equivalent_liquidity>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_equivalent_liquidity;
}

void type<::mmx::Node_get_swap_equivalent_liquidity>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_equivalent_liquidity());
}

void type<::mmx::Node_get_swap_equivalent_liquidity>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_equivalent_liquidity& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_equivalent_liquidity_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_equivalent_liquidity_return;
}

void type<::mmx::Node_get_swap_equivalent_liquidity_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_equivalent_liquidity_return());
}

void type<::mmx::Node_get_swap_equivalent_liquidity_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_equivalent_liquidity_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_fees_earned>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_fees_earned;
}

void type<::mmx::Node_get_swap_fees_earned>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_fees_earned());
}

void type<::mmx::Node_get_swap_fees_earned>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_fees_earned& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_fees_earned_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_fees_earned_return;
}

void type<::mmx::Node_get_swap_fees_earned_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_fees_earned_return());
}

void type<::mmx::Node_get_swap_fees_earned_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_fees_earned_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_history>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_history;
}

void type<::mmx::Node_get_swap_history>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_history());
}

void type<::mmx::Node_get_swap_history>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_history& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_history_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_history_return;
}

void type<::mmx::Node_get_swap_history_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_history_return());
}

void type<::mmx::Node_get_swap_history_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_history_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_info>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_info;
}

void type<::mmx::Node_get_swap_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_info());
}

void type<::mmx::Node_get_swap_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_info_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_info_return;
}

void type<::mmx::Node_get_swap_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_info_return());
}

void type<::mmx::Node_get_swap_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_liquidity_by>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_liquidity_by;
}

void type<::mmx::Node_get_swap_liquidity_by>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_liquidity_by());
}

void type<::mmx::Node_get_swap_liquidity_by>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_liquidity_by& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_liquidity_by_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_liquidity_by_return;
}

void type<::mmx::Node_get_swap_liquidity_by_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_liquidity_by_return());
}

void type<::mmx::Node_get_swap_liquidity_by_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_liquidity_by_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_trade_estimate>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_trade_estimate;
}

void type<::mmx::Node_get_swap_trade_estimate>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_trade_estimate());
}

void type<::mmx::Node_get_swap_trade_estimate>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_trade_estimate& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_trade_estimate_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_trade_estimate_return;
}

void type<::mmx::Node_get_swap_trade_estimate_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_trade_estimate_return());
}

void type<::mmx::Node_get_swap_trade_estimate_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_trade_estimate_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_user_info>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_user_info;
}

void type<::mmx::Node_get_swap_user_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_user_info());
}

void type<::mmx::Node_get_swap_user_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_user_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swap_user_info_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swap_user_info_return;
}

void type<::mmx::Node_get_swap_user_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swap_user_info_return());
}

void type<::mmx::Node_get_swap_user_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swap_user_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swaps>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swaps;
}

void type<::mmx::Node_get_swaps>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swaps());
}

void type<::mmx::Node_get_swaps>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swaps& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_swaps_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_swaps_return;
}

void type<::mmx::Node_get_swaps_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_swaps_return());
}

void type<::mmx::Node_get_swaps_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_swaps_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_synced_height>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_synced_height;
}

void type<::mmx::Node_get_synced_height>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_synced_height());
}

void type<::mmx::Node_get_synced_height>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_synced_height& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_synced_height_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_synced_height_return;
}

void type<::mmx::Node_get_synced_height_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_synced_height_return());
}

void type<::mmx::Node_get_synced_height_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_synced_height_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_synced_vdf_height>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_synced_vdf_height;
}

void type<::mmx::Node_get_synced_vdf_height>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_synced_vdf_height());
}

void type<::mmx::Node_get_synced_vdf_height>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_synced_vdf_height& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_synced_vdf_height_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_synced_vdf_height_return;
}

void type<::mmx::Node_get_synced_vdf_height_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_synced_vdf_height_return());
}

void type<::mmx::Node_get_synced_vdf_height_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_synced_vdf_height_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_total_balance>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_total_balance;
}

void type<::mmx::Node_get_total_balance>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_total_balance());
}

void type<::mmx::Node_get_total_balance>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_balance& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_total_balance_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_total_balance_return;
}

void type<::mmx::Node_get_total_balance_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_total_balance_return());
}

void type<::mmx::Node_get_total_balance_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_balance_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_total_balances>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_total_balances;
}

void type<::mmx::Node_get_total_balances>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_total_balances());
}

void type<::mmx::Node_get_total_balances>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_balances& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_total_balances_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_total_balances_return;
}

void type<::mmx::Node_get_total_balances_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_total_balances_return());
}

void type<::mmx::Node_get_total_balances_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_balances_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_total_supply>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_total_supply;
}

void type<::mmx::Node_get_total_supply>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_total_supply());
}

void type<::mmx::Node_get_total_supply>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_supply& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_total_supply_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_total_supply_return;
}

void type<::mmx::Node_get_total_supply_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_total_supply_return());
}

void type<::mmx::Node_get_total_supply_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_supply_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_trade_history>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_trade_history;
}

void type<::mmx::Node_get_trade_history>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_trade_history());
}

void type<::mmx::Node_get_trade_history>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_trade_history& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_trade_history_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_trade_history_return;
}

void type<::mmx::Node_get_trade_history_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_trade_history_return());
}

void type<::mmx::Node_get_trade_history_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_trade_history_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_trade_history_for>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_trade_history_for;
}

void type<::mmx::Node_get_trade_history_for>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_trade_history_for());
}

void type<::mmx::Node_get_trade_history_for>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_trade_history_for& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_trade_history_for_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_trade_history_for_return;
}

void type<::mmx::Node_get_trade_history_for_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_trade_history_for_return());
}

void type<::mmx::Node_get_trade_history_for_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_trade_history_for_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_transaction>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_transaction;
}

void type<::mmx::Node_get_transaction>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_transaction());
}

void type<::mmx::Node_get_transaction>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transaction& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_transaction_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_transaction_return;
}

void type<::mmx::Node_get_transaction_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_transaction_return());
}

void type<::mmx::Node_get_transaction_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transaction_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_transactions>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_transactions;
}

void type<::mmx::Node_get_transactions>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_transactions());
}

void type<::mmx::Node_get_transactions>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transactions& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_transactions_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_transactions_return;
}

void type<::mmx::Node_get_transactions_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_transactions_return());
}

void type<::mmx::Node_get_transactions_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transactions_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_height>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_height;
}

void type<::mmx::Node_get_tx_height>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_height());
}

void type<::mmx::Node_get_tx_height>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_height& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_height_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_height_return;
}

void type<::mmx::Node_get_tx_height_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_height_return());
}

void type<::mmx::Node_get_tx_height_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_height_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_ids>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_ids;
}

void type<::mmx::Node_get_tx_ids>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_ids());
}

void type<::mmx::Node_get_tx_ids>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_ids& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_ids_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_ids_return;
}

void type<::mmx::Node_get_tx_ids_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_ids_return());
}

void type<::mmx::Node_get_tx_ids_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_ids_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_ids_at>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_ids_at;
}

void type<::mmx::Node_get_tx_ids_at>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_ids_at());
}

void type<::mmx::Node_get_tx_ids_at>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_ids_at& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_ids_at_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_ids_at_return;
}

void type<::mmx::Node_get_tx_ids_at_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_ids_at_return());
}

void type<::mmx::Node_get_tx_ids_at_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_ids_at_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_ids_since>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_ids_since;
}

void type<::mmx::Node_get_tx_ids_since>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_ids_since());
}

void type<::mmx::Node_get_tx_ids_since>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_ids_since& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_ids_since_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_ids_since_return;
}

void type<::mmx::Node_get_tx_ids_since_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_ids_since_return());
}

void type<::mmx::Node_get_tx_ids_since_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_ids_since_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_info>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_info;
}

void type<::mmx::Node_get_tx_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_info());
}

void type<::mmx::Node_get_tx_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_info_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_info_return;
}

void type<::mmx::Node_get_tx_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_info_return());
}

void type<::mmx::Node_get_tx_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_info_for>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_info_for;
}

void type<::mmx::Node_get_tx_info_for>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_info_for());
}

void type<::mmx::Node_get_tx_info_for>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_info_for& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_tx_info_for_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_tx_info_for_return;
}

void type<::mmx::Node_get_tx_info_for_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_info_for_return());
}

void type<::mmx::Node_get_tx_info_for_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_info_for_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_vdf_height>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_vdf_height;
}

void type<::mmx::Node_get_vdf_height>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_vdf_height());
}

void type<::mmx::Node_get_vdf_height>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_vdf_height& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_vdf_height_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_vdf_height_return;
}

void type<::mmx::Node_get_vdf_height_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_vdf_height_return());
}

void type<::mmx::Node_get_vdf_height_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_vdf_height_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_vdf_peak>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_vdf_peak;
}

void type<::mmx::Node_get_vdf_peak>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_vdf_peak());
}

void type<::mmx::Node_get_vdf_peak>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_vdf_peak& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_get_vdf_peak_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_get_vdf_peak_return;
}

void type<::mmx::Node_get_vdf_peak_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_vdf_peak_return());
}

void type<::mmx::Node_get_vdf_peak_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_vdf_peak_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage;
}

void type<::mmx::Node_read_storage>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage());
}

void type<::mmx::Node_read_storage>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_return;
}

void type<::mmx::Node_read_storage_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_return());
}

void type<::mmx::Node_read_storage_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_array>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_array;
}

void type<::mmx::Node_read_storage_array>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_array());
}

void type<::mmx::Node_read_storage_array>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_array& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_array_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_array_return;
}

void type<::mmx::Node_read_storage_array_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_array_return());
}

void type<::mmx::Node_read_storage_array_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_array_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_entry_addr>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_entry_addr;
}

void type<::mmx::Node_read_storage_entry_addr>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_entry_addr());
}

void type<::mmx::Node_read_storage_entry_addr>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_entry_addr& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_entry_addr_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_entry_addr_return;
}

void type<::mmx::Node_read_storage_entry_addr_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_entry_addr_return());
}

void type<::mmx::Node_read_storage_entry_addr_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_entry_addr_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_entry_string>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_entry_string;
}

void type<::mmx::Node_read_storage_entry_string>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_entry_string());
}

void type<::mmx::Node_read_storage_entry_string>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_entry_string& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_entry_string_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_entry_string_return;
}

void type<::mmx::Node_read_storage_entry_string_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_entry_string_return());
}

void type<::mmx::Node_read_storage_entry_string_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_entry_string_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_entry_var>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_entry_var;
}

void type<::mmx::Node_read_storage_entry_var>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_entry_var());
}

void type<::mmx::Node_read_storage_entry_var>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_entry_var& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_entry_var_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_entry_var_return;
}

void type<::mmx::Node_read_storage_entry_var_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_entry_var_return());
}

void type<::mmx::Node_read_storage_entry_var_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_entry_var_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_field>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_field;
}

void type<::mmx::Node_read_storage_field>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_field());
}

void type<::mmx::Node_read_storage_field>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_field& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_field_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_field_return;
}

void type<::mmx::Node_read_storage_field_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_field_return());
}

void type<::mmx::Node_read_storage_field_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_field_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_map>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_map;
}

void type<::mmx::Node_read_storage_map>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_map());
}

void type<::mmx::Node_read_storage_map>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_map& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_map_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_map_return;
}

void type<::mmx::Node_read_storage_map_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_map_return());
}

void type<::mmx::Node_read_storage_map_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_map_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_object>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_object;
}

void type<::mmx::Node_read_storage_object>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_object());
}

void type<::mmx::Node_read_storage_object>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_object& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_object_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_object_return;
}

void type<::mmx::Node_read_storage_object_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_object_return());
}

void type<::mmx::Node_read_storage_object_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_object_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_var>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_var;
}

void type<::mmx::Node_read_storage_var>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_var());
}

void type<::mmx::Node_read_storage_var>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_var& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_read_storage_var_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_read_storage_var_return;
}

void type<::mmx::Node_read_storage_var_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_read_storage_var_return());
}

void type<::mmx::Node_read_storage_var_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_read_storage_var_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_revert_sync>::get_type_code() {
	return mmx::vnx_native_type_code_Node_revert_sync;
}

void type<::mmx::Node_revert_sync>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_revert_sync());
}

void type<::mmx::Node_revert_sync>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_revert_sync& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_revert_sync_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_revert_sync_return;
}

void type<::mmx::Node_revert_sync_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_revert_sync_return());
}

void type<::mmx::Node_revert_sync_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_revert_sync_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_start_sync>::get_type_code() {
	return mmx::vnx_native_type_code_Node_start_sync;
}

void type<::mmx::Node_start_sync>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_start_sync());
}

void type<::mmx::Node_start_sync>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_start_sync& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_start_sync_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_start_sync_return;
}

void type<::mmx::Node_start_sync_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_start_sync_return());
}

void type<::mmx::Node_start_sync_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_start_sync_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_validate>::get_type_code() {
	return mmx::vnx_native_type_code_Node_validate;
}

void type<::mmx::Node_validate>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_validate());
}

void type<::mmx::Node_validate>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_validate& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_validate_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_validate_return;
}

void type<::mmx::Node_validate_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_validate_return());
}

void type<::mmx::Node_validate_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_validate_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_verify_partial>::get_type_code() {
	return mmx::vnx_native_type_code_Node_verify_partial;
}

void type<::mmx::Node_verify_partial>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_verify_partial());
}

void type<::mmx::Node_verify_partial>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_verify_partial& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_verify_partial_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_verify_partial_return;
}

void type<::mmx::Node_verify_partial_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_verify_partial_return());
}

void type<::mmx::Node_verify_partial_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_verify_partial_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_verify_plot_nft_target>::get_type_code() {
	return mmx::vnx_native_type_code_Node_verify_plot_nft_target;
}

void type<::mmx::Node_verify_plot_nft_target>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_verify_plot_nft_target());
}

void type<::mmx::Node_verify_plot_nft_target>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_verify_plot_nft_target& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Node_verify_plot_nft_target_return>::get_type_code() {
	return mmx::vnx_native_type_code_Node_verify_plot_nft_target_return;
}

void type<::mmx::Node_verify_plot_nft_target_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_verify_plot_nft_target_return());
}

void type<::mmx::Node_verify_plot_nft_target_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_verify_plot_nft_target_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Operation>::get_type_code() {
	return mmx::vnx_native_type_code_Operation;
}

void type<::mmx::Operation>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Operation());
}

void type<::mmx::Operation>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Operation& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Partial>::get_type_code() {
	return mmx::vnx_native_type_code_Partial;
}

void type<::mmx::Partial>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Partial());
}

void type<::mmx::Partial>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Partial& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::PeerInfo>::get_type_code() {
	return mmx::vnx_native_type_code_PeerInfo;
}

void type<::mmx::PeerInfo>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::PeerInfo());
}

void type<::mmx::PeerInfo>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::PeerInfo& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::PlotHeader>::get_type_code() {
	return mmx::vnx_native_type_code_PlotHeader;
}

void type<::mmx::PlotHeader>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::PlotHeader());
}

void type<::mmx::PlotHeader>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::PlotHeader& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::ProofOfSpace>::get_type_code() {
	return mmx::vnx_native_type_code_ProofOfSpace;
}

void type<::mmx::ProofOfSpace>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ProofOfSpace());
}

void type<::mmx::ProofOfSpace>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ProofOfSpace& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::ProofOfSpaceNFT>::get_type_code() {
	return mmx::vnx_native_type_code_ProofOfSpaceNFT;
}

void type<::mmx::ProofOfSpaceNFT>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ProofOfSpaceNFT());
}

void type<::mmx::ProofOfSpaceNFT>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ProofOfSpaceNFT& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::ProofOfSpaceOG>::get_type_code() {
	return mmx::vnx_native_type_code_ProofOfSpaceOG;
}

void type<::mmx::ProofOfSpaceOG>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ProofOfSpaceOG());
}

void type<::mmx::ProofOfSpaceOG>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ProofOfSpaceOG& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::ProofOfTime>::get_type_code() {
	return mmx::vnx_native_type_code_ProofOfTime;
}

void type<::mmx::ProofOfTime>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ProofOfTime());
}

void type<::mmx::ProofOfTime>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ProofOfTime& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::ProofResponse>::get_type_code() {
	return mmx::vnx_native_type_code_ProofResponse;
}

void type<::mmx::ProofResponse>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ProofResponse());
}

void type<::mmx::ProofResponse>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ProofResponse& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::ReceiveNote>::get_type_code() {
	return mmx::vnx_native_type_code_ReceiveNote;
}

void type<::mmx::ReceiveNote>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ReceiveNote());
}

void type<::mmx::ReceiveNote>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ReceiveNote& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Request>::get_type_code() {
	return mmx::vnx_native_type_code_Request;
}

void type<::mmx::Request>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Request());
}

void type<::mmx::Request>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Request& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Return>::get_type_code() {
	return mmx::vnx_native_type_code_Return;
}

void type<::mmx::Return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Return());
}

void type<::mmx::Return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_discover>::get_type_code() {
	return mmx::vnx_native_type_code_Router_discover;
}

void type<::mmx::Router_discover>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_discover());
}

void type<::mmx::Router_discover>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_discover& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_discover_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_discover_return;
}

void type<::mmx::Router_discover_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_discover_return());
}

void type<::mmx::Router_discover_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_discover_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_fetch_block>::get_type_code() {
	return mmx::vnx_native_type_code_Router_fetch_block;
}

void type<::mmx::Router_fetch_block>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_fetch_block());
}

void type<::mmx::Router_fetch_block>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_fetch_block& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_fetch_block_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_fetch_block_return;
}

void type<::mmx::Router_fetch_block_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_fetch_block_return());
}

void type<::mmx::Router_fetch_block_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_fetch_block_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_fetch_block_at>::get_type_code() {
	return mmx::vnx_native_type_code_Router_fetch_block_at;
}

void type<::mmx::Router_fetch_block_at>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_fetch_block_at());
}

void type<::mmx::Router_fetch_block_at>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_fetch_block_at& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_fetch_block_at_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_fetch_block_at_return;
}

void type<::mmx::Router_fetch_block_at_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_fetch_block_at_return());
}

void type<::mmx::Router_fetch_block_at_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_fetch_block_at_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_blocks_at>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_blocks_at;
}

void type<::mmx::Router_get_blocks_at>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_blocks_at());
}

void type<::mmx::Router_get_blocks_at>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_blocks_at& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_blocks_at_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_blocks_at_return;
}

void type<::mmx::Router_get_blocks_at_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_blocks_at_return());
}

void type<::mmx::Router_get_blocks_at_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_blocks_at_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_connected_peers>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_connected_peers;
}

void type<::mmx::Router_get_connected_peers>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_connected_peers());
}

void type<::mmx::Router_get_connected_peers>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_connected_peers& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_connected_peers_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_connected_peers_return;
}

void type<::mmx::Router_get_connected_peers_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_connected_peers_return());
}

void type<::mmx::Router_get_connected_peers_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_connected_peers_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_id>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_id;
}

void type<::mmx::Router_get_id>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_id());
}

void type<::mmx::Router_get_id>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_id& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_id_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_id_return;
}

void type<::mmx::Router_get_id_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_id_return());
}

void type<::mmx::Router_get_id_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_id_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_info>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_info;
}

void type<::mmx::Router_get_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_info());
}

void type<::mmx::Router_get_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_info_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_info_return;
}

void type<::mmx::Router_get_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_info_return());
}

void type<::mmx::Router_get_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_known_peers>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_known_peers;
}

void type<::mmx::Router_get_known_peers>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_known_peers());
}

void type<::mmx::Router_get_known_peers>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_known_peers& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_known_peers_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_known_peers_return;
}

void type<::mmx::Router_get_known_peers_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_known_peers_return());
}

void type<::mmx::Router_get_known_peers_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_known_peers_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_peer_info>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_peer_info;
}

void type<::mmx::Router_get_peer_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_peer_info());
}

void type<::mmx::Router_get_peer_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peer_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_peer_info_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_peer_info_return;
}

void type<::mmx::Router_get_peer_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_peer_info_return());
}

void type<::mmx::Router_get_peer_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peer_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_peers>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_peers;
}

void type<::mmx::Router_get_peers>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_peers());
}

void type<::mmx::Router_get_peers>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peers& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_get_peers_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_get_peers_return;
}

void type<::mmx::Router_get_peers_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_peers_return());
}

void type<::mmx::Router_get_peers_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peers_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_kick_peer>::get_type_code() {
	return mmx::vnx_native_type_code_Router_kick_peer;
}

void type<::mmx::Router_kick_peer>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_kick_peer());
}

void type<::mmx::Router_kick_peer>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_kick_peer& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_kick_peer_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_kick_peer_return;
}

void type<::mmx::Router_kick_peer_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_kick_peer_return());
}

void type<::mmx::Router_kick_peer_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_kick_peer_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_sign_msg>::get_type_code() {
	return mmx::vnx_native_type_code_Router_sign_msg;
}

void type<::mmx::Router_sign_msg>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_sign_msg());
}

void type<::mmx::Router_sign_msg>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_sign_msg& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Router_sign_msg_return>::get_type_code() {
	return mmx::vnx_native_type_code_Router_sign_msg_return;
}

void type<::mmx::Router_sign_msg_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_sign_msg_return());
}

void type<::mmx::Router_sign_msg_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_sign_msg_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Solution>::get_type_code() {
	return mmx::vnx_native_type_code_Solution;
}

void type<::mmx::Solution>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Solution());
}

void type<::mmx::Solution>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Solution& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::TimeLord_stop_vdf>::get_type_code() {
	return mmx::vnx_native_type_code_TimeLord_stop_vdf;
}

void type<::mmx::TimeLord_stop_vdf>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::TimeLord_stop_vdf());
}

void type<::mmx::TimeLord_stop_vdf>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::TimeLord_stop_vdf& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::TimeLord_stop_vdf_return>::get_type_code() {
	return mmx::vnx_native_type_code_TimeLord_stop_vdf_return;
}

void type<::mmx::TimeLord_stop_vdf_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::TimeLord_stop_vdf_return());
}

void type<::mmx::TimeLord_stop_vdf_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::TimeLord_stop_vdf_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Transaction>::get_type_code() {
	return mmx::vnx_native_type_code_Transaction;
}

void type<::mmx::Transaction>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Transaction());
}

void type<::mmx::Transaction>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Transaction& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::TransactionBase>::get_type_code() {
	return mmx::vnx_native_type_code_TransactionBase;
}

void type<::mmx::TransactionBase>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::TransactionBase());
}

void type<::mmx::TransactionBase>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::TransactionBase& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::VDF_Point>::get_type_code() {
	return mmx::vnx_native_type_code_VDF_Point;
}

void type<::mmx::VDF_Point>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::VDF_Point());
}

void type<::mmx::VDF_Point>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::VDF_Point& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::ValidatorVote>::get_type_code() {
	return mmx::vnx_native_type_code_ValidatorVote;
}

void type<::mmx::ValidatorVote>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ValidatorVote());
}

void type<::mmx::ValidatorVote>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ValidatorVote& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_accept_offer>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_accept_offer;
}

void type<::mmx::Wallet_accept_offer>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_accept_offer());
}

void type<::mmx::Wallet_accept_offer>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_accept_offer& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_accept_offer_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_accept_offer_return;
}

void type<::mmx::Wallet_accept_offer_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_accept_offer_return());
}

void type<::mmx::Wallet_accept_offer_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_accept_offer_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_add_account>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_add_account;
}

void type<::mmx::Wallet_add_account>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_add_account());
}

void type<::mmx::Wallet_add_account>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_add_account& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_add_account_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_add_account_return;
}

void type<::mmx::Wallet_add_account_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_add_account_return());
}

void type<::mmx::Wallet_add_account_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_add_account_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_add_token>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_add_token;
}

void type<::mmx::Wallet_add_token>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_add_token());
}

void type<::mmx::Wallet_add_token>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_add_token& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_add_token_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_add_token_return;
}

void type<::mmx::Wallet_add_token_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_add_token_return());
}

void type<::mmx::Wallet_add_token_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_add_token_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_cancel_offer>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_cancel_offer;
}

void type<::mmx::Wallet_cancel_offer>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_cancel_offer());
}

void type<::mmx::Wallet_cancel_offer>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_cancel_offer& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_cancel_offer_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_cancel_offer_return;
}

void type<::mmx::Wallet_cancel_offer_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_cancel_offer_return());
}

void type<::mmx::Wallet_cancel_offer_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_cancel_offer_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_complete>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_complete;
}

void type<::mmx::Wallet_complete>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_complete());
}

void type<::mmx::Wallet_complete>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_complete& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_complete_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_complete_return;
}

void type<::mmx::Wallet_complete_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_complete_return());
}

void type<::mmx::Wallet_complete_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_complete_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_create_account>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_create_account;
}

void type<::mmx::Wallet_create_account>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_create_account());
}

void type<::mmx::Wallet_create_account>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_create_account& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_create_account_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_create_account_return;
}

void type<::mmx::Wallet_create_account_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_create_account_return());
}

void type<::mmx::Wallet_create_account_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_create_account_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_create_wallet>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_create_wallet;
}

void type<::mmx::Wallet_create_wallet>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_create_wallet());
}

void type<::mmx::Wallet_create_wallet>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_create_wallet& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_create_wallet_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_create_wallet_return;
}

void type<::mmx::Wallet_create_wallet_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_create_wallet_return());
}

void type<::mmx::Wallet_create_wallet_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_create_wallet_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_deploy>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_deploy;
}

void type<::mmx::Wallet_deploy>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_deploy());
}

void type<::mmx::Wallet_deploy>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_deploy& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_deploy_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_deploy_return;
}

void type<::mmx::Wallet_deploy_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_deploy_return());
}

void type<::mmx::Wallet_deploy_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_deploy_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_deposit>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_deposit;
}

void type<::mmx::Wallet_deposit>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_deposit());
}

void type<::mmx::Wallet_deposit>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_deposit& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_deposit_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_deposit_return;
}

void type<::mmx::Wallet_deposit_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_deposit_return());
}

void type<::mmx::Wallet_deposit_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_deposit_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_execute>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_execute;
}

void type<::mmx::Wallet_execute>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_execute());
}

void type<::mmx::Wallet_execute>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_execute& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_execute_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_execute_return;
}

void type<::mmx::Wallet_execute_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_execute_return());
}

void type<::mmx::Wallet_execute_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_execute_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_export_wallet>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_export_wallet;
}

void type<::mmx::Wallet_export_wallet>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_export_wallet());
}

void type<::mmx::Wallet_export_wallet>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_export_wallet& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_export_wallet_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_export_wallet_return;
}

void type<::mmx::Wallet_export_wallet_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_export_wallet_return());
}

void type<::mmx::Wallet_export_wallet_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_export_wallet_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_find_wallet_by_addr>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_find_wallet_by_addr;
}

void type<::mmx::Wallet_find_wallet_by_addr>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_find_wallet_by_addr());
}

void type<::mmx::Wallet_find_wallet_by_addr>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_find_wallet_by_addr& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_find_wallet_by_addr_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_find_wallet_by_addr_return;
}

void type<::mmx::Wallet_find_wallet_by_addr_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_find_wallet_by_addr_return());
}

void type<::mmx::Wallet_find_wallet_by_addr_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_find_wallet_by_addr_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_gather_inputs_for>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_gather_inputs_for;
}

void type<::mmx::Wallet_gather_inputs_for>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_gather_inputs_for());
}

void type<::mmx::Wallet_gather_inputs_for>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_gather_inputs_for& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_gather_inputs_for_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_gather_inputs_for_return;
}

void type<::mmx::Wallet_gather_inputs_for_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_gather_inputs_for_return());
}

void type<::mmx::Wallet_gather_inputs_for_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_gather_inputs_for_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_account>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_account;
}

void type<::mmx::Wallet_get_account>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_account());
}

void type<::mmx::Wallet_get_account>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_account& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_account_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_account_return;
}

void type<::mmx::Wallet_get_account_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_account_return());
}

void type<::mmx::Wallet_get_account_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_account_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_address>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_address;
}

void type<::mmx::Wallet_get_address>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_address());
}

void type<::mmx::Wallet_get_address>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_address& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_address_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_address_return;
}

void type<::mmx::Wallet_get_address_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_address_return());
}

void type<::mmx::Wallet_get_address_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_address_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_all_accounts>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_all_accounts;
}

void type<::mmx::Wallet_get_all_accounts>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_all_accounts());
}

void type<::mmx::Wallet_get_all_accounts>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_accounts& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_all_accounts_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_all_accounts_return;
}

void type<::mmx::Wallet_get_all_accounts_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_all_accounts_return());
}

void type<::mmx::Wallet_get_all_accounts_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_accounts_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_all_addresses>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_all_addresses;
}

void type<::mmx::Wallet_get_all_addresses>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_all_addresses());
}

void type<::mmx::Wallet_get_all_addresses>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_addresses& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_all_addresses_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_all_addresses_return;
}

void type<::mmx::Wallet_get_all_addresses_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_all_addresses_return());
}

void type<::mmx::Wallet_get_all_addresses_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_addresses_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_all_farmer_keys>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_all_farmer_keys;
}

void type<::mmx::Wallet_get_all_farmer_keys>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_all_farmer_keys());
}

void type<::mmx::Wallet_get_all_farmer_keys>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_farmer_keys& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_all_farmer_keys_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_all_farmer_keys_return;
}

void type<::mmx::Wallet_get_all_farmer_keys_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_all_farmer_keys_return());
}

void type<::mmx::Wallet_get_all_farmer_keys_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_farmer_keys_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_balance>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_balance;
}

void type<::mmx::Wallet_get_balance>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_balance());
}

void type<::mmx::Wallet_get_balance>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_balance& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_balance_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_balance_return;
}

void type<::mmx::Wallet_get_balance_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_balance_return());
}

void type<::mmx::Wallet_get_balance_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_balance_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_balances>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_balances;
}

void type<::mmx::Wallet_get_balances>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_balances());
}

void type<::mmx::Wallet_get_balances>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_balances& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_balances_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_balances_return;
}

void type<::mmx::Wallet_get_balances_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_balances_return());
}

void type<::mmx::Wallet_get_balances_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_balances_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_contract_balances>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_contract_balances;
}

void type<::mmx::Wallet_get_contract_balances>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_contract_balances());
}

void type<::mmx::Wallet_get_contract_balances>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_contract_balances& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_contract_balances_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_contract_balances_return;
}

void type<::mmx::Wallet_get_contract_balances_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_contract_balances_return());
}

void type<::mmx::Wallet_get_contract_balances_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_contract_balances_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_contracts>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_contracts;
}

void type<::mmx::Wallet_get_contracts>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_contracts());
}

void type<::mmx::Wallet_get_contracts>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_contracts& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_contracts_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_contracts_return;
}

void type<::mmx::Wallet_get_contracts_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_contracts_return());
}

void type<::mmx::Wallet_get_contracts_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_contracts_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_contracts_owned>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_contracts_owned;
}

void type<::mmx::Wallet_get_contracts_owned>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_contracts_owned());
}

void type<::mmx::Wallet_get_contracts_owned>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_contracts_owned& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_contracts_owned_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_contracts_owned_return;
}

void type<::mmx::Wallet_get_contracts_owned_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_contracts_owned_return());
}

void type<::mmx::Wallet_get_contracts_owned_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_contracts_owned_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_farmer_keys>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_farmer_keys;
}

void type<::mmx::Wallet_get_farmer_keys>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_farmer_keys());
}

void type<::mmx::Wallet_get_farmer_keys>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_farmer_keys& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_farmer_keys_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_farmer_keys_return;
}

void type<::mmx::Wallet_get_farmer_keys_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_farmer_keys_return());
}

void type<::mmx::Wallet_get_farmer_keys_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_farmer_keys_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_history>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_history;
}

void type<::mmx::Wallet_get_history>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_history());
}

void type<::mmx::Wallet_get_history>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_history& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_history_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_history_return;
}

void type<::mmx::Wallet_get_history_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_history_return());
}

void type<::mmx::Wallet_get_history_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_history_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_history_memo>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_history_memo;
}

void type<::mmx::Wallet_get_history_memo>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_history_memo());
}

void type<::mmx::Wallet_get_history_memo>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_history_memo& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_history_memo_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_history_memo_return;
}

void type<::mmx::Wallet_get_history_memo_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_history_memo_return());
}

void type<::mmx::Wallet_get_history_memo_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_history_memo_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_master_seed>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_master_seed;
}

void type<::mmx::Wallet_get_master_seed>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_master_seed());
}

void type<::mmx::Wallet_get_master_seed>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_master_seed& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_master_seed_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_master_seed_return;
}

void type<::mmx::Wallet_get_master_seed_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_master_seed_return());
}

void type<::mmx::Wallet_get_master_seed_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_master_seed_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_mnemonic_seed>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_mnemonic_seed;
}

void type<::mmx::Wallet_get_mnemonic_seed>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_mnemonic_seed());
}

void type<::mmx::Wallet_get_mnemonic_seed>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_mnemonic_seed& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_mnemonic_seed_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_mnemonic_seed_return;
}

void type<::mmx::Wallet_get_mnemonic_seed_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_mnemonic_seed_return());
}

void type<::mmx::Wallet_get_mnemonic_seed_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_mnemonic_seed_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_mnemonic_wordlist>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_mnemonic_wordlist;
}

void type<::mmx::Wallet_get_mnemonic_wordlist>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_mnemonic_wordlist());
}

void type<::mmx::Wallet_get_mnemonic_wordlist>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_mnemonic_wordlist& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_mnemonic_wordlist_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_mnemonic_wordlist_return;
}

void type<::mmx::Wallet_get_mnemonic_wordlist_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_mnemonic_wordlist_return());
}

void type<::mmx::Wallet_get_mnemonic_wordlist_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_mnemonic_wordlist_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_offers>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_offers;
}

void type<::mmx::Wallet_get_offers>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_offers());
}

void type<::mmx::Wallet_get_offers>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_offers& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_offers_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_offers_return;
}

void type<::mmx::Wallet_get_offers_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_offers_return());
}

void type<::mmx::Wallet_get_offers_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_offers_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_swap_liquidity>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_swap_liquidity;
}

void type<::mmx::Wallet_get_swap_liquidity>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_swap_liquidity());
}

void type<::mmx::Wallet_get_swap_liquidity>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_swap_liquidity& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_swap_liquidity_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_swap_liquidity_return;
}

void type<::mmx::Wallet_get_swap_liquidity_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_swap_liquidity_return());
}

void type<::mmx::Wallet_get_swap_liquidity_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_swap_liquidity_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_token_list>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_token_list;
}

void type<::mmx::Wallet_get_token_list>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_token_list());
}

void type<::mmx::Wallet_get_token_list>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_token_list& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_token_list_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_token_list_return;
}

void type<::mmx::Wallet_get_token_list_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_token_list_return());
}

void type<::mmx::Wallet_get_token_list_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_token_list_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_total_balances>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_total_balances;
}

void type<::mmx::Wallet_get_total_balances>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_total_balances());
}

void type<::mmx::Wallet_get_total_balances>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_total_balances& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_total_balances_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_total_balances_return;
}

void type<::mmx::Wallet_get_total_balances_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_total_balances_return());
}

void type<::mmx::Wallet_get_total_balances_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_total_balances_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_tx_log>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_tx_log;
}

void type<::mmx::Wallet_get_tx_log>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_tx_log());
}

void type<::mmx::Wallet_get_tx_log>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_tx_log& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_get_tx_log_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_get_tx_log_return;
}

void type<::mmx::Wallet_get_tx_log_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_tx_log_return());
}

void type<::mmx::Wallet_get_tx_log_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_tx_log_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_import_wallet>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_import_wallet;
}

void type<::mmx::Wallet_import_wallet>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_import_wallet());
}

void type<::mmx::Wallet_import_wallet>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_import_wallet& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_import_wallet_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_import_wallet_return;
}

void type<::mmx::Wallet_import_wallet_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_import_wallet_return());
}

void type<::mmx::Wallet_import_wallet_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_import_wallet_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_is_locked>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_is_locked;
}

void type<::mmx::Wallet_is_locked>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_is_locked());
}

void type<::mmx::Wallet_is_locked>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_is_locked& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_is_locked_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_is_locked_return;
}

void type<::mmx::Wallet_is_locked_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_is_locked_return());
}

void type<::mmx::Wallet_is_locked_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_is_locked_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_lock>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_lock;
}

void type<::mmx::Wallet_lock>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_lock());
}

void type<::mmx::Wallet_lock>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_lock& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_lock_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_lock_return;
}

void type<::mmx::Wallet_lock_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_lock_return());
}

void type<::mmx::Wallet_lock_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_lock_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_make_offer>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_make_offer;
}

void type<::mmx::Wallet_make_offer>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_make_offer());
}

void type<::mmx::Wallet_make_offer>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_make_offer& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_make_offer_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_make_offer_return;
}

void type<::mmx::Wallet_make_offer_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_make_offer_return());
}

void type<::mmx::Wallet_make_offer_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_make_offer_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_mark_spent>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_mark_spent;
}

void type<::mmx::Wallet_mark_spent>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_mark_spent());
}

void type<::mmx::Wallet_mark_spent>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_mark_spent& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_mark_spent_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_mark_spent_return;
}

void type<::mmx::Wallet_mark_spent_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_mark_spent_return());
}

void type<::mmx::Wallet_mark_spent_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_mark_spent_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_offer_trade>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_offer_trade;
}

void type<::mmx::Wallet_offer_trade>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_offer_trade());
}

void type<::mmx::Wallet_offer_trade>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_offer_trade& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_offer_trade_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_offer_trade_return;
}

void type<::mmx::Wallet_offer_trade_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_offer_trade_return());
}

void type<::mmx::Wallet_offer_trade_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_offer_trade_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_offer_withdraw>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_offer_withdraw;
}

void type<::mmx::Wallet_offer_withdraw>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_offer_withdraw());
}

void type<::mmx::Wallet_offer_withdraw>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_offer_withdraw& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_offer_withdraw_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_offer_withdraw_return;
}

void type<::mmx::Wallet_offer_withdraw_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_offer_withdraw_return());
}

void type<::mmx::Wallet_offer_withdraw_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_offer_withdraw_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_plotnft_create>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_plotnft_create;
}

void type<::mmx::Wallet_plotnft_create>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_plotnft_create());
}

void type<::mmx::Wallet_plotnft_create>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_plotnft_create& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_plotnft_create_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_plotnft_create_return;
}

void type<::mmx::Wallet_plotnft_create_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_plotnft_create_return());
}

void type<::mmx::Wallet_plotnft_create_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_plotnft_create_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_plotnft_exec>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_plotnft_exec;
}

void type<::mmx::Wallet_plotnft_exec>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_plotnft_exec());
}

void type<::mmx::Wallet_plotnft_exec>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_plotnft_exec& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_plotnft_exec_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_plotnft_exec_return;
}

void type<::mmx::Wallet_plotnft_exec_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_plotnft_exec_return());
}

void type<::mmx::Wallet_plotnft_exec_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_plotnft_exec_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_release>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_release;
}

void type<::mmx::Wallet_release>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_release());
}

void type<::mmx::Wallet_release>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_release& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_release_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_release_return;
}

void type<::mmx::Wallet_release_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_release_return());
}

void type<::mmx::Wallet_release_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_release_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_release_all>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_release_all;
}

void type<::mmx::Wallet_release_all>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_release_all());
}

void type<::mmx::Wallet_release_all>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_release_all& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_release_all_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_release_all_return;
}

void type<::mmx::Wallet_release_all_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_release_all_return());
}

void type<::mmx::Wallet_release_all_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_release_all_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_rem_token>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_rem_token;
}

void type<::mmx::Wallet_rem_token>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_rem_token());
}

void type<::mmx::Wallet_rem_token>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_rem_token& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_rem_token_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_rem_token_return;
}

void type<::mmx::Wallet_rem_token_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_rem_token_return());
}

void type<::mmx::Wallet_rem_token_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_rem_token_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_remove_account>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_remove_account;
}

void type<::mmx::Wallet_remove_account>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_remove_account());
}

void type<::mmx::Wallet_remove_account>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_remove_account& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_remove_account_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_remove_account_return;
}

void type<::mmx::Wallet_remove_account_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_remove_account_return());
}

void type<::mmx::Wallet_remove_account_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_remove_account_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_reserve>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_reserve;
}

void type<::mmx::Wallet_reserve>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_reserve());
}

void type<::mmx::Wallet_reserve>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_reserve& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_reserve_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_reserve_return;
}

void type<::mmx::Wallet_reserve_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_reserve_return());
}

void type<::mmx::Wallet_reserve_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_reserve_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_reset_cache>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_reset_cache;
}

void type<::mmx::Wallet_reset_cache>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_reset_cache());
}

void type<::mmx::Wallet_reset_cache>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_reset_cache& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_reset_cache_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_reset_cache_return;
}

void type<::mmx::Wallet_reset_cache_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_reset_cache_return());
}

void type<::mmx::Wallet_reset_cache_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_reset_cache_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_send>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_send;
}

void type<::mmx::Wallet_send>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_send());
}

void type<::mmx::Wallet_send>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_send_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_send_return;
}

void type<::mmx::Wallet_send_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_send_return());
}

void type<::mmx::Wallet_send_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_send_from>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_send_from;
}

void type<::mmx::Wallet_send_from>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_send_from());
}

void type<::mmx::Wallet_send_from>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send_from& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_send_from_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_send_from_return;
}

void type<::mmx::Wallet_send_from_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_send_from_return());
}

void type<::mmx::Wallet_send_from_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send_from_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_send_many>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_send_many;
}

void type<::mmx::Wallet_send_many>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_send_many());
}

void type<::mmx::Wallet_send_many>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send_many& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_send_many_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_send_many_return;
}

void type<::mmx::Wallet_send_many_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_send_many_return());
}

void type<::mmx::Wallet_send_many_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send_many_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_send_off>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_send_off;
}

void type<::mmx::Wallet_send_off>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_send_off());
}

void type<::mmx::Wallet_send_off>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send_off& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_send_off_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_send_off_return;
}

void type<::mmx::Wallet_send_off_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_send_off_return());
}

void type<::mmx::Wallet_send_off_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send_off_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_set_address_count>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_set_address_count;
}

void type<::mmx::Wallet_set_address_count>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_set_address_count());
}

void type<::mmx::Wallet_set_address_count>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_set_address_count& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_set_address_count_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_set_address_count_return;
}

void type<::mmx::Wallet_set_address_count_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_set_address_count_return());
}

void type<::mmx::Wallet_set_address_count_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_set_address_count_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_sign_msg>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_sign_msg;
}

void type<::mmx::Wallet_sign_msg>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_sign_msg());
}

void type<::mmx::Wallet_sign_msg>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_sign_msg& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_sign_msg_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_sign_msg_return;
}

void type<::mmx::Wallet_sign_msg_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_sign_msg_return());
}

void type<::mmx::Wallet_sign_msg_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_sign_msg_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_sign_off>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_sign_off;
}

void type<::mmx::Wallet_sign_off>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_sign_off());
}

void type<::mmx::Wallet_sign_off>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_sign_off& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_sign_off_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_sign_off_return;
}

void type<::mmx::Wallet_sign_off_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_sign_off_return());
}

void type<::mmx::Wallet_sign_off_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_sign_off_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_swap_add_liquid>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_swap_add_liquid;
}

void type<::mmx::Wallet_swap_add_liquid>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_swap_add_liquid());
}

void type<::mmx::Wallet_swap_add_liquid>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_swap_add_liquid& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_swap_add_liquid_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_swap_add_liquid_return;
}

void type<::mmx::Wallet_swap_add_liquid_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_swap_add_liquid_return());
}

void type<::mmx::Wallet_swap_add_liquid_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_swap_add_liquid_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_swap_rem_liquid>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_swap_rem_liquid;
}

void type<::mmx::Wallet_swap_rem_liquid>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_swap_rem_liquid());
}

void type<::mmx::Wallet_swap_rem_liquid>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_swap_rem_liquid& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_swap_rem_liquid_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_swap_rem_liquid_return;
}

void type<::mmx::Wallet_swap_rem_liquid_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_swap_rem_liquid_return());
}

void type<::mmx::Wallet_swap_rem_liquid_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_swap_rem_liquid_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_swap_trade>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_swap_trade;
}

void type<::mmx::Wallet_swap_trade>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_swap_trade());
}

void type<::mmx::Wallet_swap_trade>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_swap_trade& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_swap_trade_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_swap_trade_return;
}

void type<::mmx::Wallet_swap_trade_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_swap_trade_return());
}

void type<::mmx::Wallet_swap_trade_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_swap_trade_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_unlock>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_unlock;
}

void type<::mmx::Wallet_unlock>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_unlock());
}

void type<::mmx::Wallet_unlock>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_unlock& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_unlock_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_unlock_return;
}

void type<::mmx::Wallet_unlock_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_unlock_return());
}

void type<::mmx::Wallet_unlock_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_unlock_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_update_cache>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_update_cache;
}

void type<::mmx::Wallet_update_cache>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_update_cache());
}

void type<::mmx::Wallet_update_cache>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_update_cache& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::Wallet_update_cache_return>::get_type_code() {
	return mmx::vnx_native_type_code_Wallet_update_cache_return;
}

void type<::mmx::Wallet_update_cache_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_update_cache_return());
}

void type<::mmx::Wallet_update_cache_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_update_cache_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::WalletFile>::get_type_code() {
	return mmx::vnx_native_type_code_WalletFile;
}

void type<::mmx::WalletFile>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::WalletFile());
}

void type<::mmx::WalletFile>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::WalletFile& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::WebAPI_shutdown>::get_type_code() {
	return mmx::vnx_native_type_code_WebAPI_shutdown;
}

void type<::mmx::WebAPI_shutdown>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::WebAPI_shutdown());
}

void type<::mmx::WebAPI_shutdown>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::WebAPI_shutdown& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::WebAPI_shutdown_return>::get_type_code() {
	return mmx::vnx_native_type_code_WebAPI_shutdown_return;
}

void type<::mmx::WebAPI_shutdown_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::WebAPI_shutdown_return());
}

void type<::mmx::WebAPI_shutdown_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::WebAPI_shutdown_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::account_info_t>::get_type_code() {
	return mmx::vnx_native_type_code_account_info_t;
}

void type<::mmx::account_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::account_info_t());
}

void type<::mmx::account_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::account_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::account_t>::get_type_code() {
	return mmx::vnx_native_type_code_account_t;
}

void type<::mmx::account_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::account_t());
}

void type<::mmx::account_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::account_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::addr_t>::get_type_code() {
	return nullptr;
}

void type<::mmx::addr_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::addr_t());
}

void type<::mmx::addr_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::addr_t& value, bool special) {
	const std::vector<int> tmp = {11, 32, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::mmx::balance_t>::get_type_code() {
	return mmx::vnx_native_type_code_balance_t;
}

void type<::mmx::balance_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::balance_t());
}

void type<::mmx::balance_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::balance_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::block_index_t>::get_type_code() {
	return mmx::vnx_native_type_code_block_index_t;
}

void type<::mmx::block_index_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::block_index_t());
}

void type<::mmx::block_index_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::block_index_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::compile_flags_t>::get_type_code() {
	return mmx::vnx_native_type_code_compile_flags_t;
}

void type<::mmx::compile_flags_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::compile_flags_t());
}

void type<::mmx::compile_flags_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::compile_flags_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::error_code_e>::get_type_code() {
	return mmx::vnx_native_type_code_error_code_e;
}

void type<::mmx::error_code_e>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::error_code_e());
}

void type<::mmx::error_code_e>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::error_code_e& value, bool special) {
	if(!special || value.is_valid()) {
		code.push_back(CODE_STRING);
	} else {
		code.push_back(CODE_UINT32);
	}
}

const TypeCode* type<::mmx::exec_entry_t>::get_type_code() {
	return mmx::vnx_native_type_code_exec_entry_t;
}

void type<::mmx::exec_entry_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::exec_entry_t());
}

void type<::mmx::exec_entry_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exec_entry_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::exec_error_t>::get_type_code() {
	return mmx::vnx_native_type_code_exec_error_t;
}

void type<::mmx::exec_error_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::exec_error_t());
}

void type<::mmx::exec_error_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exec_error_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::exec_result_t>::get_type_code() {
	return mmx::vnx_native_type_code_exec_result_t;
}

void type<::mmx::exec_result_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::exec_result_t());
}

void type<::mmx::exec_result_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exec_result_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::farmed_block_info_t>::get_type_code() {
	return mmx::vnx_native_type_code_farmed_block_info_t;
}

void type<::mmx::farmed_block_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::farmed_block_info_t());
}

void type<::mmx::farmed_block_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::farmed_block_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::farmed_block_summary_t>::get_type_code() {
	return mmx::vnx_native_type_code_farmed_block_summary_t;
}

void type<::mmx::farmed_block_summary_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::farmed_block_summary_t());
}

void type<::mmx::farmed_block_summary_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::farmed_block_summary_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::fixed128>::get_type_code() {
	return nullptr;
}

void type<::mmx::fixed128>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::fixed128());
}

void type<::mmx::fixed128>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::fixed128& value, bool special) {
	const std::vector<int> tmp = {11, 16, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::mmx::hash_512_t>::get_type_code() {
	return nullptr;
}

void type<::mmx::hash_512_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::hash_512_t());
}

void type<::mmx::hash_512_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::hash_512_t& value, bool special) {
	const std::vector<int> tmp = {11, 64, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::mmx::hash_t>::get_type_code() {
	return nullptr;
}

void type<::mmx::hash_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::hash_t());
}

void type<::mmx::hash_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::hash_t& value, bool special) {
	const std::vector<int> tmp = {11, 32, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::mmx::node_info_t>::get_type_code() {
	return mmx::vnx_native_type_code_node_info_t;
}

void type<::mmx::node_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::node_info_t());
}

void type<::mmx::node_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::node_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::node_type_e>::get_type_code() {
	return mmx::vnx_native_type_code_node_type_e;
}

void type<::mmx::node_type_e>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::node_type_e());
}

void type<::mmx::node_type_e>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::node_type_e& value, bool special) {
	if(!special || value.is_valid()) {
		code.push_back(CODE_STRING);
	} else {
		code.push_back(CODE_UINT32);
	}
}

const TypeCode* type<::mmx::offer_data_t>::get_type_code() {
	return mmx::vnx_native_type_code_offer_data_t;
}

void type<::mmx::offer_data_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::offer_data_t());
}

void type<::mmx::offer_data_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::offer_data_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::peer_info_t>::get_type_code() {
	return mmx::vnx_native_type_code_peer_info_t;
}

void type<::mmx::peer_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::peer_info_t());
}

void type<::mmx::peer_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::peer_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::permission_e>::get_type_code() {
	return mmx::vnx_native_type_code_permission_e;
}

void type<::mmx::permission_e>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::permission_e());
}

void type<::mmx::permission_e>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::permission_e& value, bool special) {
	if(!special || value.is_valid()) {
		code.push_back(CODE_STRING);
	} else {
		code.push_back(CODE_UINT32);
	}
}

const TypeCode* type<::mmx::plot_nft_info_t>::get_type_code() {
	return mmx::vnx_native_type_code_plot_nft_info_t;
}

void type<::mmx::plot_nft_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::plot_nft_info_t());
}

void type<::mmx::plot_nft_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::plot_nft_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::pooling_error_e>::get_type_code() {
	return mmx::vnx_native_type_code_pooling_error_e;
}

void type<::mmx::pooling_error_e>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::pooling_error_e());
}

void type<::mmx::pooling_error_e>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::pooling_error_e& value, bool special) {
	if(!special || value.is_valid()) {
		code.push_back(CODE_STRING);
	} else {
		code.push_back(CODE_UINT32);
	}
}

const TypeCode* type<::mmx::pooling_info_t>::get_type_code() {
	return mmx::vnx_native_type_code_pooling_info_t;
}

void type<::mmx::pooling_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::pooling_info_t());
}

void type<::mmx::pooling_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::pooling_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::pooling_stats_t>::get_type_code() {
	return mmx::vnx_native_type_code_pooling_stats_t;
}

void type<::mmx::pooling_stats_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::pooling_stats_t());
}

void type<::mmx::pooling_stats_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::pooling_stats_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::pubkey_t>::get_type_code() {
	return nullptr;
}

void type<::mmx::pubkey_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::pubkey_t());
}

void type<::mmx::pubkey_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::pubkey_t& value, bool special) {
	const std::vector<int> tmp = {11, 33, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::mmx::query_filter_t>::get_type_code() {
	return mmx::vnx_native_type_code_query_filter_t;
}

void type<::mmx::query_filter_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::query_filter_t());
}

void type<::mmx::query_filter_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::query_filter_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::signature_t>::get_type_code() {
	return nullptr;
}

void type<::mmx::signature_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::signature_t());
}

void type<::mmx::signature_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::signature_t& value, bool special) {
	const std::vector<int> tmp = {11, 64, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::mmx::skey_t>::get_type_code() {
	return nullptr;
}

void type<::mmx::skey_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::skey_t());
}

void type<::mmx::skey_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::skey_t& value, bool special) {
	const std::vector<int> tmp = {11, 32, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::mmx::spend_options_t>::get_type_code() {
	return mmx::vnx_native_type_code_spend_options_t;
}

void type<::mmx::spend_options_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::spend_options_t());
}

void type<::mmx::spend_options_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::spend_options_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::swap_entry_t>::get_type_code() {
	return mmx::vnx_native_type_code_swap_entry_t;
}

void type<::mmx::swap_entry_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::swap_entry_t());
}

void type<::mmx::swap_entry_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::swap_entry_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::swap_info_t>::get_type_code() {
	return mmx::vnx_native_type_code_swap_info_t;
}

void type<::mmx::swap_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::swap_info_t());
}

void type<::mmx::swap_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::swap_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::swap_pool_info_t>::get_type_code() {
	return mmx::vnx_native_type_code_swap_pool_info_t;
}

void type<::mmx::swap_pool_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::swap_pool_info_t());
}

void type<::mmx::swap_pool_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::swap_pool_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::swap_user_info_t>::get_type_code() {
	return mmx::vnx_native_type_code_swap_user_info_t;
}

void type<::mmx::swap_user_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::swap_user_info_t());
}

void type<::mmx::swap_user_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::swap_user_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::trade_entry_t>::get_type_code() {
	return mmx::vnx_native_type_code_trade_entry_t;
}

void type<::mmx::trade_entry_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::trade_entry_t());
}

void type<::mmx::trade_entry_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::trade_entry_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::trade_log_t>::get_type_code() {
	return mmx::vnx_native_type_code_trade_log_t;
}

void type<::mmx::trade_log_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::trade_log_t());
}

void type<::mmx::trade_log_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::trade_log_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::tx_entry_t>::get_type_code() {
	return mmx::vnx_native_type_code_tx_entry_t;
}

void type<::mmx::tx_entry_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::tx_entry_t());
}

void type<::mmx::tx_entry_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_entry_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::tx_index_t>::get_type_code() {
	return mmx::vnx_native_type_code_tx_index_t;
}

void type<::mmx::tx_index_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::tx_index_t());
}

void type<::mmx::tx_index_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_index_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::tx_info_t>::get_type_code() {
	return mmx::vnx_native_type_code_tx_info_t;
}

void type<::mmx::tx_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::tx_info_t());
}

void type<::mmx::tx_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::tx_log_entry_t>::get_type_code() {
	return mmx::vnx_native_type_code_tx_log_entry_t;
}

void type<::mmx::tx_log_entry_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::tx_log_entry_t());
}

void type<::mmx::tx_log_entry_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_log_entry_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::tx_note_e>::get_type_code() {
	return mmx::vnx_native_type_code_tx_note_e;
}

void type<::mmx::tx_note_e>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::tx_note_e());
}

void type<::mmx::tx_note_e>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_note_e& value, bool special) {
	if(!special || value.is_valid()) {
		code.push_back(CODE_STRING);
	} else {
		code.push_back(CODE_UINT32);
	}
}

const TypeCode* type<::mmx::tx_type_e>::get_type_code() {
	return mmx::vnx_native_type_code_tx_type_e;
}

void type<::mmx::tx_type_e>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::tx_type_e());
}

void type<::mmx::tx_type_e>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_type_e& value, bool special) {
	if(!special || value.is_valid()) {
		code.push_back(CODE_STRING);
	} else {
		code.push_back(CODE_UINT32);
	}
}

const TypeCode* type<::mmx::txin_t>::get_type_code() {
	return mmx::vnx_native_type_code_txin_t;
}

void type<::mmx::txin_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::txin_t());
}

void type<::mmx::txin_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::txin_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::txio_entry_t>::get_type_code() {
	return mmx::vnx_native_type_code_txio_entry_t;
}

void type<::mmx::txio_entry_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::txio_entry_t());
}

void type<::mmx::txio_entry_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::txio_entry_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::txio_t>::get_type_code() {
	return mmx::vnx_native_type_code_txio_t;
}

void type<::mmx::txio_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::txio_t());
}

void type<::mmx::txio_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::txio_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::txout_t>::get_type_code() {
	return mmx::vnx_native_type_code_txout_t;
}

void type<::mmx::txout_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::txout_t());
}

void type<::mmx::txout_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::txout_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::uint128>::get_type_code() {
	return nullptr;
}

void type<::mmx::uint128>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::uint128());
}

void type<::mmx::uint128>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::uint128& value, bool special) {
	const std::vector<int> tmp = {11, 16, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::mmx::uint_fraction_t>::get_type_code() {
	return mmx::vnx_native_type_code_uint_fraction_t;
}

void type<::mmx::uint_fraction_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::uint_fraction_t());
}

void type<::mmx::uint_fraction_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::uint_fraction_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::ulong_fraction_t>::get_type_code() {
	return mmx::vnx_native_type_code_ulong_fraction_t;
}

void type<::mmx::ulong_fraction_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ulong_fraction_t());
}

void type<::mmx::ulong_fraction_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ulong_fraction_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::virtual_plot_info_t>::get_type_code() {
	return mmx::vnx_native_type_code_virtual_plot_info_t;
}

void type<::mmx::virtual_plot_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::virtual_plot_info_t());
}

void type<::mmx::virtual_plot_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::virtual_plot_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}


} // namespace vnx


namespace mmx {


void register_all_types() {
	vnx::register_type_code(::mmx::Block::static_create_type_code());
	vnx::register_type_code(::mmx::BlockHeader::static_create_type_code());
	vnx::register_type_code(::mmx::ChainParams::static_create_type_code());
	vnx::register_type_code(::mmx::Challenge::static_create_type_code());
	vnx::register_type_code(::mmx::Contract::static_create_type_code());
	vnx::register_type_code(::mmx::FarmInfo::static_create_type_code());
	vnx::register_type_code(::mmx::FarmerBase::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_farm_info::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_farm_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_farmer_keys::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_farmer_keys_return::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_mac_addr::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_mac_addr_return::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_partial_diff::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_partial_diff_return::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_partial_diffs::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_partial_diffs_return::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_sign_block::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_sign_block_return::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_sign_vote::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_sign_vote_return::static_create_type_code());
	vnx::register_type_code(::mmx::HarvesterBase::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_add_plot_dir::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_add_plot_dir_return::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_get_farm_info::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_get_farm_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_get_total_bytes::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_get_total_bytes_return::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_reload::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_reload_return::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_rem_plot_dir::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_rem_plot_dir_return::static_create_type_code());
	vnx::register_type_code(::mmx::IntervalRequest::static_create_type_code());
	vnx::register_type_code(::mmx::KeyFile::static_create_type_code());
	vnx::register_type_code(::mmx::LookupInfo::static_create_type_code());
	vnx::register_type_code(::mmx::NetworkInfo::static_create_type_code());
	vnx::register_type_code(::mmx::NodeBase::static_create_type_code());
	vnx::register_type_code(::mmx::Node_add_block::static_create_type_code());
	vnx::register_type_code(::mmx::Node_add_block_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_add_transaction::static_create_type_code());
	vnx::register_type_code(::mmx::Node_add_transaction_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_call_contract::static_create_type_code());
	vnx::register_type_code(::mmx::Node_call_contract_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_dump_storage::static_create_type_code());
	vnx::register_type_code(::mmx::Node_dump_storage_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_fetch_offers::static_create_type_code());
	vnx::register_type_code(::mmx::Node_fetch_offers_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_all_balances::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_all_balances_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_balance::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_balance_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_balances::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_balances_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_at::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_at_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_hash::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_hash_ex::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_hash_ex_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contract::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contract_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contract_balances::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contract_balances_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contract_for::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contract_for_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contracts::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contracts_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contracts_by::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contracts_by_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contracts_owned_by::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contracts_owned_by_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_exec_history::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_exec_history_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_farmed_block_summary::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_farmed_block_summary_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_farmed_blocks::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_farmed_blocks_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_farmer_ranking::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_farmer_ranking_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_genesis_hash::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_genesis_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_header::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_header_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_header_at::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_header_at_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_height::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_height_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_history::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_history_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_history_memo::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_history_memo_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_network_info::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_network_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_offer::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_offer_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_offers::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_offers_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_offers_by::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_offers_by_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_params::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_params_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_plot_nft_info::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_plot_nft_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_plot_nft_target::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_plot_nft_target_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_recent_offers::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_recent_offers_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_recent_offers_for::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_recent_offers_for_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_equivalent_liquidity::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_equivalent_liquidity_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_fees_earned::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_fees_earned_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_history::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_history_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_info::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_liquidity_by::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_liquidity_by_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_trade_estimate::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_trade_estimate_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_user_info::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swap_user_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swaps::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_swaps_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_synced_height::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_synced_height_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_synced_vdf_height::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_synced_vdf_height_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_total_balance::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_total_balance_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_total_balances::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_total_balances_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_total_supply::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_total_supply_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_trade_history::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_trade_history_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_trade_history_for::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_trade_history_for_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_transaction::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_transaction_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_transactions::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_transactions_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_height::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_height_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_ids::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_ids_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_ids_at::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_ids_at_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_ids_since::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_ids_since_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_info::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_info_for::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_info_for_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_vdf_height::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_vdf_height_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_vdf_peak::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_vdf_peak_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_array::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_array_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_entry_addr::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_entry_addr_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_entry_string::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_entry_string_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_entry_var::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_entry_var_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_field::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_field_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_map::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_map_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_object::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_object_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_var::static_create_type_code());
	vnx::register_type_code(::mmx::Node_read_storage_var_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_revert_sync::static_create_type_code());
	vnx::register_type_code(::mmx::Node_revert_sync_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_start_sync::static_create_type_code());
	vnx::register_type_code(::mmx::Node_start_sync_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_validate::static_create_type_code());
	vnx::register_type_code(::mmx::Node_validate_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_verify_partial::static_create_type_code());
	vnx::register_type_code(::mmx::Node_verify_partial_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_verify_plot_nft_target::static_create_type_code());
	vnx::register_type_code(::mmx::Node_verify_plot_nft_target_return::static_create_type_code());
	vnx::register_type_code(::mmx::Operation::static_create_type_code());
	vnx::register_type_code(::mmx::Partial::static_create_type_code());
	vnx::register_type_code(::mmx::PeerInfo::static_create_type_code());
	vnx::register_type_code(::mmx::PlotHeader::static_create_type_code());
	vnx::register_type_code(::mmx::ProofOfSpace::static_create_type_code());
	vnx::register_type_code(::mmx::ProofOfSpaceNFT::static_create_type_code());
	vnx::register_type_code(::mmx::ProofOfSpaceOG::static_create_type_code());
	vnx::register_type_code(::mmx::ProofOfTime::static_create_type_code());
	vnx::register_type_code(::mmx::ProofResponse::static_create_type_code());
	vnx::register_type_code(::mmx::ReceiveNote::static_create_type_code());
	vnx::register_type_code(::mmx::Request::static_create_type_code());
	vnx::register_type_code(::mmx::Return::static_create_type_code());
	vnx::register_type_code(::mmx::RouterBase::static_create_type_code());
	vnx::register_type_code(::mmx::Router_discover::static_create_type_code());
	vnx::register_type_code(::mmx::Router_discover_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_fetch_block::static_create_type_code());
	vnx::register_type_code(::mmx::Router_fetch_block_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_fetch_block_at::static_create_type_code());
	vnx::register_type_code(::mmx::Router_fetch_block_at_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_blocks_at::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_blocks_at_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_connected_peers::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_connected_peers_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_id::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_id_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_info::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_known_peers::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_known_peers_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_peer_info::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_peer_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_peers::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_peers_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_kick_peer::static_create_type_code());
	vnx::register_type_code(::mmx::Router_kick_peer_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_sign_msg::static_create_type_code());
	vnx::register_type_code(::mmx::Router_sign_msg_return::static_create_type_code());
	vnx::register_type_code(::mmx::Solution::static_create_type_code());
	vnx::register_type_code(::mmx::TimeLordBase::static_create_type_code());
	vnx::register_type_code(::mmx::TimeLord_stop_vdf::static_create_type_code());
	vnx::register_type_code(::mmx::TimeLord_stop_vdf_return::static_create_type_code());
	vnx::register_type_code(::mmx::Transaction::static_create_type_code());
	vnx::register_type_code(::mmx::TransactionBase::static_create_type_code());
	vnx::register_type_code(::mmx::VDF_Point::static_create_type_code());
	vnx::register_type_code(::mmx::ValidatorVote::static_create_type_code());
	vnx::register_type_code(::mmx::WalletBase::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_accept_offer::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_accept_offer_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_add_account::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_add_account_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_add_token::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_add_token_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_cancel_offer::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_cancel_offer_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_complete::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_complete_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_create_account::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_create_account_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_create_wallet::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_create_wallet_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_deploy::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_deploy_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_deposit::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_deposit_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_execute::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_execute_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_export_wallet::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_export_wallet_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_find_wallet_by_addr::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_find_wallet_by_addr_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_gather_inputs_for::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_gather_inputs_for_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_account::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_account_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_address::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_address_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_all_accounts::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_all_accounts_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_all_addresses::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_all_addresses_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_all_farmer_keys::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_all_farmer_keys_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_balance::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_balance_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_balances::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_balances_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_contract_balances::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_contract_balances_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_contracts::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_contracts_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_contracts_owned::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_contracts_owned_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_farmer_keys::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_farmer_keys_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_history::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_history_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_history_memo::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_history_memo_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_master_seed::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_master_seed_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_mnemonic_seed::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_mnemonic_seed_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_mnemonic_wordlist::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_mnemonic_wordlist_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_offers::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_offers_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_swap_liquidity::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_swap_liquidity_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_token_list::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_token_list_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_total_balances::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_total_balances_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_tx_log::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_tx_log_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_import_wallet::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_import_wallet_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_is_locked::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_is_locked_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_lock::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_lock_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_make_offer::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_make_offer_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_mark_spent::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_mark_spent_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_offer_trade::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_offer_trade_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_offer_withdraw::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_offer_withdraw_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_plotnft_create::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_plotnft_create_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_plotnft_exec::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_plotnft_exec_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_release::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_release_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_release_all::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_release_all_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_rem_token::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_rem_token_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_remove_account::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_remove_account_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_reserve::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_reserve_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_reset_cache::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_reset_cache_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_send::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_send_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_send_from::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_send_from_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_send_many::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_send_many_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_send_off::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_send_off_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_set_address_count::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_set_address_count_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_sign_msg::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_sign_msg_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_sign_off::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_sign_off_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_swap_add_liquid::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_swap_add_liquid_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_swap_rem_liquid::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_swap_rem_liquid_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_swap_trade::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_swap_trade_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_unlock::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_unlock_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_update_cache::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_update_cache_return::static_create_type_code());
	vnx::register_type_code(::mmx::WalletFile::static_create_type_code());
	vnx::register_type_code(::mmx::WebAPIBase::static_create_type_code());
	vnx::register_type_code(::mmx::WebAPI_shutdown::static_create_type_code());
	vnx::register_type_code(::mmx::WebAPI_shutdown_return::static_create_type_code());
	vnx::register_type_code(::mmx::account_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::account_t::static_create_type_code());
	vnx::register_type_code(::mmx::balance_t::static_create_type_code());
	vnx::register_type_code(::mmx::block_index_t::static_create_type_code());
	vnx::register_type_code(::mmx::compile_flags_t::static_create_type_code());
	vnx::register_type_code(::mmx::error_code_e::static_create_type_code());
	vnx::register_type_code(::mmx::exec_entry_t::static_create_type_code());
	vnx::register_type_code(::mmx::exec_error_t::static_create_type_code());
	vnx::register_type_code(::mmx::exec_result_t::static_create_type_code());
	vnx::register_type_code(::mmx::farmed_block_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::farmed_block_summary_t::static_create_type_code());
	vnx::register_type_code(::mmx::node_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::node_type_e::static_create_type_code());
	vnx::register_type_code(::mmx::offer_data_t::static_create_type_code());
	vnx::register_type_code(::mmx::peer_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::permission_e::static_create_type_code());
	vnx::register_type_code(::mmx::plot_nft_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::pooling_error_e::static_create_type_code());
	vnx::register_type_code(::mmx::pooling_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::pooling_stats_t::static_create_type_code());
	vnx::register_type_code(::mmx::query_filter_t::static_create_type_code());
	vnx::register_type_code(::mmx::spend_options_t::static_create_type_code());
	vnx::register_type_code(::mmx::swap_entry_t::static_create_type_code());
	vnx::register_type_code(::mmx::swap_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::swap_pool_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::swap_user_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::trade_entry_t::static_create_type_code());
	vnx::register_type_code(::mmx::trade_log_t::static_create_type_code());
	vnx::register_type_code(::mmx::tx_entry_t::static_create_type_code());
	vnx::register_type_code(::mmx::tx_index_t::static_create_type_code());
	vnx::register_type_code(::mmx::tx_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::tx_log_entry_t::static_create_type_code());
	vnx::register_type_code(::mmx::tx_note_e::static_create_type_code());
	vnx::register_type_code(::mmx::tx_type_e::static_create_type_code());
	vnx::register_type_code(::mmx::txin_t::static_create_type_code());
	vnx::register_type_code(::mmx::txio_entry_t::static_create_type_code());
	vnx::register_type_code(::mmx::txio_t::static_create_type_code());
	vnx::register_type_code(::mmx::txout_t::static_create_type_code());
	vnx::register_type_code(::mmx::uint_fraction_t::static_create_type_code());
	vnx::register_type_code(::mmx::ulong_fraction_t::static_create_type_code());
	vnx::register_type_code(::mmx::virtual_plot_info_t::static_create_type_code());
}

static struct vnx_static_init {
	vnx_static_init() {
		register_all_types();
	}
} vnx_static_init_;

const vnx::TypeCode* const vnx_native_type_code_Block = vnx::get_type_code(vnx::Hash64(0x94965d816d328467ull));
const vnx::TypeCode* const vnx_native_type_code_BlockHeader = vnx::get_type_code(vnx::Hash64(0xcaae941a2fc712a6ull));
const vnx::TypeCode* const vnx_native_type_code_ChainParams = vnx::get_type_code(vnx::Hash64(0x51bba8d28881e8e7ull));
const vnx::TypeCode* const vnx_native_type_code_Challenge = vnx::get_type_code(vnx::Hash64(0x4bf49f8022405249ull));
const vnx::TypeCode* const vnx_native_type_code_Contract = vnx::get_type_code(vnx::Hash64(0x26b896ae8c415285ull));
const vnx::TypeCode* const vnx_native_type_code_FarmInfo = vnx::get_type_code(vnx::Hash64(0xa2701372b9137f0eull));
const vnx::TypeCode* const vnx_native_type_code_FarmerBase = vnx::get_type_code(vnx::Hash64(0xff732ba14d9d1abull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_farm_info = vnx::get_type_code(vnx::Hash64(0x7e72655f6f215b5aull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_farm_info_return = vnx::get_type_code(vnx::Hash64(0xccf47453b394d3e3ull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_farmer_keys = vnx::get_type_code(vnx::Hash64(0x784507b4594a776aull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_farmer_keys_return = vnx::get_type_code(vnx::Hash64(0xdb382c476694095full));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_mac_addr = vnx::get_type_code(vnx::Hash64(0xe9ced9f6feb676b3ull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_mac_addr_return = vnx::get_type_code(vnx::Hash64(0x9e4caad2ffaba990ull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_partial_diff = vnx::get_type_code(vnx::Hash64(0x40f08b90e2eb4ca0ull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_partial_diff_return = vnx::get_type_code(vnx::Hash64(0xd5650a69bbe8d978ull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_partial_diffs = vnx::get_type_code(vnx::Hash64(0x8806f6763215c58bull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_partial_diffs_return = vnx::get_type_code(vnx::Hash64(0x439549fd31330df6ull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_sign_block = vnx::get_type_code(vnx::Hash64(0x6924b10f345eb316ull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_sign_block_return = vnx::get_type_code(vnx::Hash64(0xb8acce9269f91310ull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_sign_vote = vnx::get_type_code(vnx::Hash64(0x655117e05d64b5fcull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_sign_vote_return = vnx::get_type_code(vnx::Hash64(0x40848c38fe18b587ull));
const vnx::TypeCode* const vnx_native_type_code_HarvesterBase = vnx::get_type_code(vnx::Hash64(0xc17118896cde1555ull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_add_plot_dir = vnx::get_type_code(vnx::Hash64(0x61714d1c7ecaffddull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_add_plot_dir_return = vnx::get_type_code(vnx::Hash64(0x8b5f7bc4f34fb5d5ull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_get_farm_info = vnx::get_type_code(vnx::Hash64(0x129f91b9ade2891full));
const vnx::TypeCode* const vnx_native_type_code_Harvester_get_farm_info_return = vnx::get_type_code(vnx::Hash64(0x87a91b15ec42441full));
const vnx::TypeCode* const vnx_native_type_code_Harvester_get_total_bytes = vnx::get_type_code(vnx::Hash64(0x36f2104b41d9a25cull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_get_total_bytes_return = vnx::get_type_code(vnx::Hash64(0xd9a9fe83ba7d6918ull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_reload = vnx::get_type_code(vnx::Hash64(0xc67a4577de7e85caull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_reload_return = vnx::get_type_code(vnx::Hash64(0x39fc8cc53bcf4659ull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_rem_plot_dir = vnx::get_type_code(vnx::Hash64(0x57674e56f3ab6076ull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_rem_plot_dir_return = vnx::get_type_code(vnx::Hash64(0xb2a8cfb3633bf358ull));
const vnx::TypeCode* const vnx_native_type_code_IntervalRequest = vnx::get_type_code(vnx::Hash64(0xa4e39be061f13d71ull));
const vnx::TypeCode* const vnx_native_type_code_KeyFile = vnx::get_type_code(vnx::Hash64(0xdf868931a939cba1ull));
const vnx::TypeCode* const vnx_native_type_code_LookupInfo = vnx::get_type_code(vnx::Hash64(0xb7b2ff343487dd63ull));
const vnx::TypeCode* const vnx_native_type_code_NetworkInfo = vnx::get_type_code(vnx::Hash64(0xd984018819746101ull));
const vnx::TypeCode* const vnx_native_type_code_NodeBase = vnx::get_type_code(vnx::Hash64(0x289d7651582d76a3ull));
const vnx::TypeCode* const vnx_native_type_code_Node_add_block = vnx::get_type_code(vnx::Hash64(0x63abca4d23f93894ull));
const vnx::TypeCode* const vnx_native_type_code_Node_add_block_return = vnx::get_type_code(vnx::Hash64(0xb6d1115db03a6d6aull));
const vnx::TypeCode* const vnx_native_type_code_Node_add_transaction = vnx::get_type_code(vnx::Hash64(0xd9782531c0e3f766ull));
const vnx::TypeCode* const vnx_native_type_code_Node_add_transaction_return = vnx::get_type_code(vnx::Hash64(0x2ded8c10e1721ba8ull));
const vnx::TypeCode* const vnx_native_type_code_Node_call_contract = vnx::get_type_code(vnx::Hash64(0x6a21b0dfe3e541e8ull));
const vnx::TypeCode* const vnx_native_type_code_Node_call_contract_return = vnx::get_type_code(vnx::Hash64(0x8449f6656a89f7aeull));
const vnx::TypeCode* const vnx_native_type_code_Node_dump_storage = vnx::get_type_code(vnx::Hash64(0x8b66a712eea839bbull));
const vnx::TypeCode* const vnx_native_type_code_Node_dump_storage_return = vnx::get_type_code(vnx::Hash64(0xbc8c0b1ce37def41ull));
const vnx::TypeCode* const vnx_native_type_code_Node_fetch_offers = vnx::get_type_code(vnx::Hash64(0xfca08ee41b997129ull));
const vnx::TypeCode* const vnx_native_type_code_Node_fetch_offers_return = vnx::get_type_code(vnx::Hash64(0x8c5cc826b759938bull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_all_balances = vnx::get_type_code(vnx::Hash64(0xe099ac5aea49433ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_all_balances_return = vnx::get_type_code(vnx::Hash64(0x80800e710295b3c1ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_balance = vnx::get_type_code(vnx::Hash64(0x2e00172d0470479ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_balance_return = vnx::get_type_code(vnx::Hash64(0xe29d98f8f1ab3e21ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_balances = vnx::get_type_code(vnx::Hash64(0x1c8af02c41e96460ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_balances_return = vnx::get_type_code(vnx::Hash64(0x1e00f02ae6304cf0ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block = vnx::get_type_code(vnx::Hash64(0xeb3fabe56dec161aull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_return = vnx::get_type_code(vnx::Hash64(0x6d9abdbf20c4b4d2ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_at = vnx::get_type_code(vnx::Hash64(0xc69c9f876a00e48full));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_at_return = vnx::get_type_code(vnx::Hash64(0x6e3c22a7391c5491ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_hash = vnx::get_type_code(vnx::Hash64(0x43c5087066b73f38ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_hash_return = vnx::get_type_code(vnx::Hash64(0x47877c5597b978dfull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_hash_ex = vnx::get_type_code(vnx::Hash64(0x6024ae54abca18cbull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_hash_ex_return = vnx::get_type_code(vnx::Hash64(0x8d82a7b11dfd7a4ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contract = vnx::get_type_code(vnx::Hash64(0xa28704c65a67a293ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contract_return = vnx::get_type_code(vnx::Hash64(0x314d0901de362f8cull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contract_balances = vnx::get_type_code(vnx::Hash64(0xeb1e66155927b13aull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contract_balances_return = vnx::get_type_code(vnx::Hash64(0x4974c6093398e264ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contract_for = vnx::get_type_code(vnx::Hash64(0x6a953dcea83b9832ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contract_for_return = vnx::get_type_code(vnx::Hash64(0xde97319367a6d647ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contracts = vnx::get_type_code(vnx::Hash64(0x49e218583c1f1c8aull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contracts_return = vnx::get_type_code(vnx::Hash64(0x13d73d6d69c8af0bull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contracts_by = vnx::get_type_code(vnx::Hash64(0xe7c397362a63f57cull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contracts_by_return = vnx::get_type_code(vnx::Hash64(0x9ad1099f1adf2565ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contracts_owned_by = vnx::get_type_code(vnx::Hash64(0x63989a04fee2fba4ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contracts_owned_by_return = vnx::get_type_code(vnx::Hash64(0x3b9dbec85ee482bfull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_exec_history = vnx::get_type_code(vnx::Hash64(0xf17c2f67bedb9df6ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_exec_history_return = vnx::get_type_code(vnx::Hash64(0x17079d265ede8785ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_farmed_block_summary = vnx::get_type_code(vnx::Hash64(0xa6cda1247bd4f537ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_farmed_block_summary_return = vnx::get_type_code(vnx::Hash64(0xef3dcd5d4d2a58e3ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_farmed_blocks = vnx::get_type_code(vnx::Hash64(0xfc412d06ff25542eull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_farmed_blocks_return = vnx::get_type_code(vnx::Hash64(0xe8697ffd381616baull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_farmer_ranking = vnx::get_type_code(vnx::Hash64(0x548d571d6384bd43ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_farmer_ranking_return = vnx::get_type_code(vnx::Hash64(0xb74e7f1a70a60ecdull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_genesis_hash = vnx::get_type_code(vnx::Hash64(0xbfab786cb64c5a3ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_genesis_hash_return = vnx::get_type_code(vnx::Hash64(0x5c5ea53e3163fd5ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_header = vnx::get_type_code(vnx::Hash64(0xf17a5d0c180db198ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_header_return = vnx::get_type_code(vnx::Hash64(0xeffae31958103da7ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_header_at = vnx::get_type_code(vnx::Hash64(0x52658163d8767c79ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_header_at_return = vnx::get_type_code(vnx::Hash64(0x4efc6897885ee521ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_height = vnx::get_type_code(vnx::Hash64(0x55f0d4ef7a117716ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_height_return = vnx::get_type_code(vnx::Hash64(0x5fb0ff1e11add033ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_history = vnx::get_type_code(vnx::Hash64(0x8b3db05c6e91011dull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_history_return = vnx::get_type_code(vnx::Hash64(0xa925b7aa92603121ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_history_memo = vnx::get_type_code(vnx::Hash64(0x693c0c791039287cull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_history_memo_return = vnx::get_type_code(vnx::Hash64(0x3bba2b40c2e82885ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_network_info = vnx::get_type_code(vnx::Hash64(0x79cedc8662eeb2e4ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_network_info_return = vnx::get_type_code(vnx::Hash64(0x28541acc5945ae0eull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_offer = vnx::get_type_code(vnx::Hash64(0xd3e336e279686563ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_offer_return = vnx::get_type_code(vnx::Hash64(0xa92bb7b910e3424full));
const vnx::TypeCode* const vnx_native_type_code_Node_get_offers = vnx::get_type_code(vnx::Hash64(0x62e5e37dd72d3175ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_offers_return = vnx::get_type_code(vnx::Hash64(0xf93f5d6546a50db1ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_offers_by = vnx::get_type_code(vnx::Hash64(0xf83c55f59e407411ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_offers_by_return = vnx::get_type_code(vnx::Hash64(0x59efe1350028d6f4ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_params = vnx::get_type_code(vnx::Hash64(0x6384b34900c2e465ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_params_return = vnx::get_type_code(vnx::Hash64(0xd0a614f2ed037180ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_plot_nft_info = vnx::get_type_code(vnx::Hash64(0x23efbfd355a3741full));
const vnx::TypeCode* const vnx_native_type_code_Node_get_plot_nft_info_return = vnx::get_type_code(vnx::Hash64(0x4d3661c719d8496bull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_plot_nft_target = vnx::get_type_code(vnx::Hash64(0x14dfd6e2b1f3282eull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_plot_nft_target_return = vnx::get_type_code(vnx::Hash64(0x6d6444fd1b89732ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_recent_offers = vnx::get_type_code(vnx::Hash64(0xfcd729efd0504fdeull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_recent_offers_return = vnx::get_type_code(vnx::Hash64(0x15933813d284d584ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_recent_offers_for = vnx::get_type_code(vnx::Hash64(0xd89f845556eb17a0ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_recent_offers_for_return = vnx::get_type_code(vnx::Hash64(0x8fbaa054b954ea7bull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_equivalent_liquidity = vnx::get_type_code(vnx::Hash64(0xc43a3083725aa480ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_equivalent_liquidity_return = vnx::get_type_code(vnx::Hash64(0x8222183b679ab5f4ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_fees_earned = vnx::get_type_code(vnx::Hash64(0x1dae57fb82265b93ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_fees_earned_return = vnx::get_type_code(vnx::Hash64(0x57002afc89a8db98ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_history = vnx::get_type_code(vnx::Hash64(0xc16faaf15fcc9f36ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_history_return = vnx::get_type_code(vnx::Hash64(0xe5d18002a6793518ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_info = vnx::get_type_code(vnx::Hash64(0x14f546a807fae18cull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_info_return = vnx::get_type_code(vnx::Hash64(0x302116742171428ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_liquidity_by = vnx::get_type_code(vnx::Hash64(0x426cded100da751eull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_liquidity_by_return = vnx::get_type_code(vnx::Hash64(0x8401973e1930a6c0ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_trade_estimate = vnx::get_type_code(vnx::Hash64(0x1c3d2e0c3a431e9eull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_trade_estimate_return = vnx::get_type_code(vnx::Hash64(0xdad9da7cd6d250a8ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_user_info = vnx::get_type_code(vnx::Hash64(0xb92b8fb7df56ec0full));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swap_user_info_return = vnx::get_type_code(vnx::Hash64(0x50fb0bab9551a420ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swaps = vnx::get_type_code(vnx::Hash64(0x219bbb3e5dcd19eaull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_swaps_return = vnx::get_type_code(vnx::Hash64(0x6c94172788fc0d28ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_synced_height = vnx::get_type_code(vnx::Hash64(0xc4fb44ec3d1a8bb7ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_synced_height_return = vnx::get_type_code(vnx::Hash64(0xd466ce92d1bbe9dbull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_synced_vdf_height = vnx::get_type_code(vnx::Hash64(0x3c9ce92abd3b42c6ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_synced_vdf_height_return = vnx::get_type_code(vnx::Hash64(0x1122764a35c86b4ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_total_balance = vnx::get_type_code(vnx::Hash64(0x91e9019d224db4b0ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_total_balance_return = vnx::get_type_code(vnx::Hash64(0x3336380a894f52a8ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_total_balances = vnx::get_type_code(vnx::Hash64(0xf54c4ec46ee6053aull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_total_balances_return = vnx::get_type_code(vnx::Hash64(0x9332c7a83f7644d7ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_total_supply = vnx::get_type_code(vnx::Hash64(0x17d971db6900bd9dull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_total_supply_return = vnx::get_type_code(vnx::Hash64(0xe69f15a0766eaf27ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_trade_history = vnx::get_type_code(vnx::Hash64(0x62736b035e3995cdull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_trade_history_return = vnx::get_type_code(vnx::Hash64(0x4d3692b594dd7f9eull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_trade_history_for = vnx::get_type_code(vnx::Hash64(0xd55cda633e3dd5b8ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_trade_history_for_return = vnx::get_type_code(vnx::Hash64(0xd61154789cdb246bull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_transaction = vnx::get_type_code(vnx::Hash64(0x9c76ca142292750full));
const vnx::TypeCode* const vnx_native_type_code_Node_get_transaction_return = vnx::get_type_code(vnx::Hash64(0x3848f078ff4024dull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_transactions = vnx::get_type_code(vnx::Hash64(0x715a5bb668426203ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_transactions_return = vnx::get_type_code(vnx::Hash64(0xd11c40a507abaaaull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_height = vnx::get_type_code(vnx::Hash64(0xf6f917fad9361e3aull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_height_return = vnx::get_type_code(vnx::Hash64(0xda69a0d06f4b5c3eull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_ids = vnx::get_type_code(vnx::Hash64(0xe268e5bf2a7f22d6ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_ids_return = vnx::get_type_code(vnx::Hash64(0xba3ffcf776e64920ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_ids_at = vnx::get_type_code(vnx::Hash64(0x904c686b59c101c3ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_ids_at_return = vnx::get_type_code(vnx::Hash64(0x945565d9cbfadc31ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_ids_since = vnx::get_type_code(vnx::Hash64(0x640af36b555e1606ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_ids_since_return = vnx::get_type_code(vnx::Hash64(0xe5c1511a48d2d288ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_info = vnx::get_type_code(vnx::Hash64(0xb5409a3aaa19d1d2ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_info_return = vnx::get_type_code(vnx::Hash64(0x3668f41cc643227full));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_info_for = vnx::get_type_code(vnx::Hash64(0xba1c6e6eccfe9369ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_info_for_return = vnx::get_type_code(vnx::Hash64(0xfd527dc84681a04ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_vdf_height = vnx::get_type_code(vnx::Hash64(0x33db3aa655c4e5feull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_vdf_height_return = vnx::get_type_code(vnx::Hash64(0x5f83cae2903e53bfull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_vdf_peak = vnx::get_type_code(vnx::Hash64(0xf3449b43830283ddull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_vdf_peak_return = vnx::get_type_code(vnx::Hash64(0x837f2b6433a274a1ull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage = vnx::get_type_code(vnx::Hash64(0xd74cd2b291cb9cd6ull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_return = vnx::get_type_code(vnx::Hash64(0xab73866ba23ed19aull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_array = vnx::get_type_code(vnx::Hash64(0xe5826950ca0a442bull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_array_return = vnx::get_type_code(vnx::Hash64(0xba7fed069216454dull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_entry_addr = vnx::get_type_code(vnx::Hash64(0xffbf8c4478bb5ab5ull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_entry_addr_return = vnx::get_type_code(vnx::Hash64(0xacd2f58f1ca8df54ull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_entry_string = vnx::get_type_code(vnx::Hash64(0xe5b52723a3714e9full));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_entry_string_return = vnx::get_type_code(vnx::Hash64(0x56c6103ea03d7ceaull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_entry_var = vnx::get_type_code(vnx::Hash64(0xb0ebcc688396e6dbull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_entry_var_return = vnx::get_type_code(vnx::Hash64(0x773a90b50f714a11ull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_field = vnx::get_type_code(vnx::Hash64(0xc9a10c9f7f2cef16ull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_field_return = vnx::get_type_code(vnx::Hash64(0xf817bcace12b9ef3ull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_map = vnx::get_type_code(vnx::Hash64(0x1cc0cc12bc2c1b4eull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_map_return = vnx::get_type_code(vnx::Hash64(0x1d56300164b3e79ull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_object = vnx::get_type_code(vnx::Hash64(0x5930cf36eeb662fbull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_object_return = vnx::get_type_code(vnx::Hash64(0x48c9a69123ef41afull));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_var = vnx::get_type_code(vnx::Hash64(0x16d0361bcb359c2full));
const vnx::TypeCode* const vnx_native_type_code_Node_read_storage_var_return = vnx::get_type_code(vnx::Hash64(0xaaa6685b20943467ull));
const vnx::TypeCode* const vnx_native_type_code_Node_revert_sync = vnx::get_type_code(vnx::Hash64(0x8c1cc38a7a8a6c1dull));
const vnx::TypeCode* const vnx_native_type_code_Node_revert_sync_return = vnx::get_type_code(vnx::Hash64(0x3962a4b86b203e0aull));
const vnx::TypeCode* const vnx_native_type_code_Node_start_sync = vnx::get_type_code(vnx::Hash64(0x6c5be8aeb25ef3c8ull));
const vnx::TypeCode* const vnx_native_type_code_Node_start_sync_return = vnx::get_type_code(vnx::Hash64(0xe75b8e6a62d7e744ull));
const vnx::TypeCode* const vnx_native_type_code_Node_validate = vnx::get_type_code(vnx::Hash64(0x95dbbd65f36b618ull));
const vnx::TypeCode* const vnx_native_type_code_Node_validate_return = vnx::get_type_code(vnx::Hash64(0xe3c465d0fc0c4a4cull));
const vnx::TypeCode* const vnx_native_type_code_Node_verify_partial = vnx::get_type_code(vnx::Hash64(0xeb15396685387f88ull));
const vnx::TypeCode* const vnx_native_type_code_Node_verify_partial_return = vnx::get_type_code(vnx::Hash64(0xb64fb769c6ffcf36ull));
const vnx::TypeCode* const vnx_native_type_code_Node_verify_plot_nft_target = vnx::get_type_code(vnx::Hash64(0xf3ac786edcae50e1ull));
const vnx::TypeCode* const vnx_native_type_code_Node_verify_plot_nft_target_return = vnx::get_type_code(vnx::Hash64(0x82f0f6ed43a0c4bull));
const vnx::TypeCode* const vnx_native_type_code_Operation = vnx::get_type_code(vnx::Hash64(0xfd69dd82e906e619ull));
const vnx::TypeCode* const vnx_native_type_code_Partial = vnx::get_type_code(vnx::Hash64(0x2c849b13a7efd71aull));
const vnx::TypeCode* const vnx_native_type_code_PeerInfo = vnx::get_type_code(vnx::Hash64(0xf7a37f624c94a121ull));
const vnx::TypeCode* const vnx_native_type_code_PlotHeader = vnx::get_type_code(vnx::Hash64(0x299c5790983c47b6ull));
const vnx::TypeCode* const vnx_native_type_code_ProofOfSpace = vnx::get_type_code(vnx::Hash64(0x9269760ad5fd0058ull));
const vnx::TypeCode* const vnx_native_type_code_ProofOfSpaceNFT = vnx::get_type_code(vnx::Hash64(0x22a4d97166711bd9ull));
const vnx::TypeCode* const vnx_native_type_code_ProofOfSpaceOG = vnx::get_type_code(vnx::Hash64(0x6def5518efc37b4ull));
const vnx::TypeCode* const vnx_native_type_code_ProofOfTime = vnx::get_type_code(vnx::Hash64(0xa84a63942b8e5c6aull));
const vnx::TypeCode* const vnx_native_type_code_ProofResponse = vnx::get_type_code(vnx::Hash64(0x816e898b36befae0ull));
const vnx::TypeCode* const vnx_native_type_code_ReceiveNote = vnx::get_type_code(vnx::Hash64(0x30439468cf29fa4bull));
const vnx::TypeCode* const vnx_native_type_code_Request = vnx::get_type_code(vnx::Hash64(0x110ce6958669f66bull));
const vnx::TypeCode* const vnx_native_type_code_Return = vnx::get_type_code(vnx::Hash64(0xb479dce669278664ull));
const vnx::TypeCode* const vnx_native_type_code_RouterBase = vnx::get_type_code(vnx::Hash64(0x952c4ef2956f31c4ull));
const vnx::TypeCode* const vnx_native_type_code_Router_discover = vnx::get_type_code(vnx::Hash64(0xeda51767d96e246cull));
const vnx::TypeCode* const vnx_native_type_code_Router_discover_return = vnx::get_type_code(vnx::Hash64(0xb4e47e012f264f94ull));
const vnx::TypeCode* const vnx_native_type_code_Router_fetch_block = vnx::get_type_code(vnx::Hash64(0x7c2f762681e7cc51ull));
const vnx::TypeCode* const vnx_native_type_code_Router_fetch_block_return = vnx::get_type_code(vnx::Hash64(0xcbe76155006bbb44ull));
const vnx::TypeCode* const vnx_native_type_code_Router_fetch_block_at = vnx::get_type_code(vnx::Hash64(0xa4deba522ed6f8adull));
const vnx::TypeCode* const vnx_native_type_code_Router_fetch_block_at_return = vnx::get_type_code(vnx::Hash64(0xff711a762d6f885ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_blocks_at = vnx::get_type_code(vnx::Hash64(0x1eb0c0d7eae3c33aull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_blocks_at_return = vnx::get_type_code(vnx::Hash64(0x70f0e9e7aa72b810ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_connected_peers = vnx::get_type_code(vnx::Hash64(0x8682feb65fbb77feull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_connected_peers_return = vnx::get_type_code(vnx::Hash64(0x5c96b95e03d32e32ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_id = vnx::get_type_code(vnx::Hash64(0xb9f7168b5ae94cd9ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_id_return = vnx::get_type_code(vnx::Hash64(0x3924146b7a803806ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_info = vnx::get_type_code(vnx::Hash64(0x364ea887c149a265ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_info_return = vnx::get_type_code(vnx::Hash64(0x15170c71ca9209a9ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_known_peers = vnx::get_type_code(vnx::Hash64(0xaa408b6bf4e8168dull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_known_peers_return = vnx::get_type_code(vnx::Hash64(0xc08cde4fbf7f2abcull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_peer_info = vnx::get_type_code(vnx::Hash64(0x520a467ef9324cb3ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_peer_info_return = vnx::get_type_code(vnx::Hash64(0xffff4ae0244281b5ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_peers = vnx::get_type_code(vnx::Hash64(0x66d68bd91b462049ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_peers_return = vnx::get_type_code(vnx::Hash64(0x595714f80f272d86ull));
const vnx::TypeCode* const vnx_native_type_code_Router_kick_peer = vnx::get_type_code(vnx::Hash64(0x359a21379021beedull));
const vnx::TypeCode* const vnx_native_type_code_Router_kick_peer_return = vnx::get_type_code(vnx::Hash64(0xd7189e110cc3a50full));
const vnx::TypeCode* const vnx_native_type_code_Router_sign_msg = vnx::get_type_code(vnx::Hash64(0x88ede2fbb99ab63eull));
const vnx::TypeCode* const vnx_native_type_code_Router_sign_msg_return = vnx::get_type_code(vnx::Hash64(0x67c8c37a7b5fc991ull));
const vnx::TypeCode* const vnx_native_type_code_Solution = vnx::get_type_code(vnx::Hash64(0x9f693babd1a91ccdull));
const vnx::TypeCode* const vnx_native_type_code_TimeLordBase = vnx::get_type_code(vnx::Hash64(0x311081636f6570efull));
const vnx::TypeCode* const vnx_native_type_code_TimeLord_stop_vdf = vnx::get_type_code(vnx::Hash64(0xf7f78eb9f371e6e7ull));
const vnx::TypeCode* const vnx_native_type_code_TimeLord_stop_vdf_return = vnx::get_type_code(vnx::Hash64(0x53e37fb500ea3a9full));
const vnx::TypeCode* const vnx_native_type_code_Transaction = vnx::get_type_code(vnx::Hash64(0xce0462acdceaa5bcull));
const vnx::TypeCode* const vnx_native_type_code_TransactionBase = vnx::get_type_code(vnx::Hash64(0x6697ffbf3611887dull));
const vnx::TypeCode* const vnx_native_type_code_VDF_Point = vnx::get_type_code(vnx::Hash64(0x1671551501b6c956ull));
const vnx::TypeCode* const vnx_native_type_code_ValidatorVote = vnx::get_type_code(vnx::Hash64(0xc056a2ff24cdee25ull));
const vnx::TypeCode* const vnx_native_type_code_WalletBase = vnx::get_type_code(vnx::Hash64(0x62207fd96d3aead7ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_accept_offer = vnx::get_type_code(vnx::Hash64(0x3299e81eb354b78full));
const vnx::TypeCode* const vnx_native_type_code_Wallet_accept_offer_return = vnx::get_type_code(vnx::Hash64(0xb44ec1a26ab66acdull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_add_account = vnx::get_type_code(vnx::Hash64(0x92d2d3518d9c33aeull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_add_account_return = vnx::get_type_code(vnx::Hash64(0xda0b2d71dd9e8336ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_add_token = vnx::get_type_code(vnx::Hash64(0x15fcc67eabc550b6ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_add_token_return = vnx::get_type_code(vnx::Hash64(0xb0b00a9f88ea83b5ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_cancel_offer = vnx::get_type_code(vnx::Hash64(0x200cca704ba873c6ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_cancel_offer_return = vnx::get_type_code(vnx::Hash64(0x86f3531ebf8c56a2ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_complete = vnx::get_type_code(vnx::Hash64(0x20da222e7c7de702ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_complete_return = vnx::get_type_code(vnx::Hash64(0x490ab9293f9dbfd0ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_create_account = vnx::get_type_code(vnx::Hash64(0x11cd618b00e9e56cull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_create_account_return = vnx::get_type_code(vnx::Hash64(0x3a0ff64dc755a8d8ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_create_wallet = vnx::get_type_code(vnx::Hash64(0xdcc08a3a1b171a19ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_create_wallet_return = vnx::get_type_code(vnx::Hash64(0xb417dca300f1949bull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_deploy = vnx::get_type_code(vnx::Hash64(0xcd71b07853d17497ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_deploy_return = vnx::get_type_code(vnx::Hash64(0x7de4805b16e313f6ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_deposit = vnx::get_type_code(vnx::Hash64(0x4bf71b9049e1c689ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_deposit_return = vnx::get_type_code(vnx::Hash64(0xf21ba8f2309d78aeull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_execute = vnx::get_type_code(vnx::Hash64(0x51a1276a27db7b4ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_execute_return = vnx::get_type_code(vnx::Hash64(0x9a51f18a1c26c764ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_export_wallet = vnx::get_type_code(vnx::Hash64(0xd52b494df565ce7ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_export_wallet_return = vnx::get_type_code(vnx::Hash64(0x1c82818ba92b03f4ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_find_wallet_by_addr = vnx::get_type_code(vnx::Hash64(0x320237e79adcef6bull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_find_wallet_by_addr_return = vnx::get_type_code(vnx::Hash64(0xdae07576f8844f6aull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_gather_inputs_for = vnx::get_type_code(vnx::Hash64(0x31d9b9888b8c2de3ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_gather_inputs_for_return = vnx::get_type_code(vnx::Hash64(0xb099ed949b98dc77ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_account = vnx::get_type_code(vnx::Hash64(0xf9669d0d42aec09eull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_account_return = vnx::get_type_code(vnx::Hash64(0xaed020aa500eed2bull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_address = vnx::get_type_code(vnx::Hash64(0xccad8dfe1543aa77ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_address_return = vnx::get_type_code(vnx::Hash64(0x4c76a08d8d85c4e4ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_accounts = vnx::get_type_code(vnx::Hash64(0xdf8bfad64085cb83ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_accounts_return = vnx::get_type_code(vnx::Hash64(0x2bb48cc4299c5782ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_addresses = vnx::get_type_code(vnx::Hash64(0xf5e2b4554613fd97ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_addresses_return = vnx::get_type_code(vnx::Hash64(0x2f16846155284194ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_farmer_keys = vnx::get_type_code(vnx::Hash64(0xc6a03b3f813d071dull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_farmer_keys_return = vnx::get_type_code(vnx::Hash64(0xa2de9b0aaffc515aull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_balance = vnx::get_type_code(vnx::Hash64(0x1bc2c2dd67ab2829ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_balance_return = vnx::get_type_code(vnx::Hash64(0xfa00e6f62563141full));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_balances = vnx::get_type_code(vnx::Hash64(0x5be581d54ae69a4ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_balances_return = vnx::get_type_code(vnx::Hash64(0xe041fcc6b3606c0full));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_contract_balances = vnx::get_type_code(vnx::Hash64(0x4d6b36c0c2804d26ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_contract_balances_return = vnx::get_type_code(vnx::Hash64(0x7800bce5a77b8bdcull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_contracts = vnx::get_type_code(vnx::Hash64(0x9ff1932bcec18d57ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_contracts_return = vnx::get_type_code(vnx::Hash64(0xf384dd12e1fac072ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_contracts_owned = vnx::get_type_code(vnx::Hash64(0x7834485ec000f577ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_contracts_owned_return = vnx::get_type_code(vnx::Hash64(0x40aec1bc5f5f5c90ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_farmer_keys = vnx::get_type_code(vnx::Hash64(0x44709e11ff3ff3eeull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_farmer_keys_return = vnx::get_type_code(vnx::Hash64(0x25479f868269fbb0ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_history = vnx::get_type_code(vnx::Hash64(0x921f73f3d97d2d4dull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_history_return = vnx::get_type_code(vnx::Hash64(0xb1b8c9a446a81b1full));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_history_memo = vnx::get_type_code(vnx::Hash64(0xcbe6c5855e8776baull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_history_memo_return = vnx::get_type_code(vnx::Hash64(0x6da659ffb94e55d7ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_master_seed = vnx::get_type_code(vnx::Hash64(0x8fddd77ece4d295bull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_master_seed_return = vnx::get_type_code(vnx::Hash64(0x8b0f38e742e132f0ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_mnemonic_seed = vnx::get_type_code(vnx::Hash64(0xacf58d3b1a8ce4c0ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_mnemonic_seed_return = vnx::get_type_code(vnx::Hash64(0xd02dd0736911ac8bull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_mnemonic_wordlist = vnx::get_type_code(vnx::Hash64(0xb833298e3ff28a44ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_mnemonic_wordlist_return = vnx::get_type_code(vnx::Hash64(0x8ce49a9b57ee5789ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_offers = vnx::get_type_code(vnx::Hash64(0x6dacbe70cbe08925ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_offers_return = vnx::get_type_code(vnx::Hash64(0xdb130e20d160c564ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_swap_liquidity = vnx::get_type_code(vnx::Hash64(0x3a8f17d496f625bull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_swap_liquidity_return = vnx::get_type_code(vnx::Hash64(0x6846e8caa82b1463ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_token_list = vnx::get_type_code(vnx::Hash64(0x322b4f4af3737efcull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_token_list_return = vnx::get_type_code(vnx::Hash64(0xe36d7210ddf3d216ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_total_balances = vnx::get_type_code(vnx::Hash64(0xedd130caba2e2f04ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_total_balances_return = vnx::get_type_code(vnx::Hash64(0x46f0368d7c4e45ddull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_tx_log = vnx::get_type_code(vnx::Hash64(0xc5570936be29c0ebull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_tx_log_return = vnx::get_type_code(vnx::Hash64(0x5c6d4b8fc9820ec1ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_import_wallet = vnx::get_type_code(vnx::Hash64(0x63a1d5b2fe482dd1ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_import_wallet_return = vnx::get_type_code(vnx::Hash64(0xc6edac537d44ecd1ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_is_locked = vnx::get_type_code(vnx::Hash64(0x6087e83febcc233ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_is_locked_return = vnx::get_type_code(vnx::Hash64(0x1ea1b30193de8d7bull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_lock = vnx::get_type_code(vnx::Hash64(0x9072deb8ab538b2bull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_lock_return = vnx::get_type_code(vnx::Hash64(0x74cb9d670ae675f3ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_make_offer = vnx::get_type_code(vnx::Hash64(0x8b0cf597e8265a73ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_make_offer_return = vnx::get_type_code(vnx::Hash64(0xf8ecff218266aadaull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_mark_spent = vnx::get_type_code(vnx::Hash64(0x107fed23348b3333ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_mark_spent_return = vnx::get_type_code(vnx::Hash64(0xf28950d2b8f874dfull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_offer_trade = vnx::get_type_code(vnx::Hash64(0x557a94a5a4887bf2ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_offer_trade_return = vnx::get_type_code(vnx::Hash64(0xb43f9bef89670cebull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_offer_withdraw = vnx::get_type_code(vnx::Hash64(0x790a334fbf5dd1e6ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_offer_withdraw_return = vnx::get_type_code(vnx::Hash64(0xea9f43cd17c41965ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_plotnft_create = vnx::get_type_code(vnx::Hash64(0x6b0c985ca2c555c9ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_plotnft_create_return = vnx::get_type_code(vnx::Hash64(0x349cedc7d1d4dcfull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_plotnft_exec = vnx::get_type_code(vnx::Hash64(0xca9e9d0dfde795d1ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_plotnft_exec_return = vnx::get_type_code(vnx::Hash64(0x8330b38d9cb47b24ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_release = vnx::get_type_code(vnx::Hash64(0x2cd72a3370e05db3ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_release_return = vnx::get_type_code(vnx::Hash64(0xd302995a8c4dcf83ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_release_all = vnx::get_type_code(vnx::Hash64(0x4bd57b9deca4be51ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_release_all_return = vnx::get_type_code(vnx::Hash64(0xf7029fb06b3b3fa5ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_rem_token = vnx::get_type_code(vnx::Hash64(0xc913cdd1600a2609ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_rem_token_return = vnx::get_type_code(vnx::Hash64(0xb59ee8fb44d30755ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_remove_account = vnx::get_type_code(vnx::Hash64(0xdf7d8816958bcb8bull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_remove_account_return = vnx::get_type_code(vnx::Hash64(0x8e0d71e4003dca80ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_reserve = vnx::get_type_code(vnx::Hash64(0xd14c466e8e7ebd76ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_reserve_return = vnx::get_type_code(vnx::Hash64(0x79de0793f575d4d6ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_reset_cache = vnx::get_type_code(vnx::Hash64(0x922c4f0299ea0bf4ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_reset_cache_return = vnx::get_type_code(vnx::Hash64(0x59e9fbfbf5d8218bull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_send = vnx::get_type_code(vnx::Hash64(0x3842658ae3c2d5ebull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_send_return = vnx::get_type_code(vnx::Hash64(0x5df7b911342a1e6full));
const vnx::TypeCode* const vnx_native_type_code_Wallet_send_from = vnx::get_type_code(vnx::Hash64(0x40c3c88665341592ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_send_from_return = vnx::get_type_code(vnx::Hash64(0xf578239f07abf05dull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_send_many = vnx::get_type_code(vnx::Hash64(0x4f35769a1b4c6786ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_send_many_return = vnx::get_type_code(vnx::Hash64(0x828bddc86fbaf1e1ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_send_off = vnx::get_type_code(vnx::Hash64(0x8b7bfc0751d27adbull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_send_off_return = vnx::get_type_code(vnx::Hash64(0x9b9017e8636e8571ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_set_address_count = vnx::get_type_code(vnx::Hash64(0x9638ddc0c1d52b15ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_set_address_count_return = vnx::get_type_code(vnx::Hash64(0x5948620640c50bf8ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_sign_msg = vnx::get_type_code(vnx::Hash64(0x5bc54cc8b0112d3aull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_sign_msg_return = vnx::get_type_code(vnx::Hash64(0x5cf2f6b20fa33f51ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_sign_off = vnx::get_type_code(vnx::Hash64(0x232c89cf3ed4d5b1ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_sign_off_return = vnx::get_type_code(vnx::Hash64(0x4b2ee7febe4ec00aull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_swap_add_liquid = vnx::get_type_code(vnx::Hash64(0xe053d1ae718e2f64ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_swap_add_liquid_return = vnx::get_type_code(vnx::Hash64(0xc2812565c73ec527ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_swap_rem_liquid = vnx::get_type_code(vnx::Hash64(0x6494b41c51e158eaull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_swap_rem_liquid_return = vnx::get_type_code(vnx::Hash64(0x946935a83dd0b8d2ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_swap_trade = vnx::get_type_code(vnx::Hash64(0x4b5a42cbf6657910ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_swap_trade_return = vnx::get_type_code(vnx::Hash64(0x8fe4c13b007c63f4ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_unlock = vnx::get_type_code(vnx::Hash64(0x800deedf12a4df74ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_unlock_return = vnx::get_type_code(vnx::Hash64(0xe8e5c839343f6bbcull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_update_cache = vnx::get_type_code(vnx::Hash64(0xf98cf07accda73b8ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_update_cache_return = vnx::get_type_code(vnx::Hash64(0x7e1b25fb37caf248ull));
const vnx::TypeCode* const vnx_native_type_code_WalletFile = vnx::get_type_code(vnx::Hash64(0xefcdc0f20fc4360eull));
const vnx::TypeCode* const vnx_native_type_code_WebAPIBase = vnx::get_type_code(vnx::Hash64(0xfe90ce601fcc0cc6ull));
const vnx::TypeCode* const vnx_native_type_code_WebAPI_shutdown = vnx::get_type_code(vnx::Hash64(0x75dd6111dc25b9d6ull));
const vnx::TypeCode* const vnx_native_type_code_WebAPI_shutdown_return = vnx::get_type_code(vnx::Hash64(0x248624ff297c34ull));
const vnx::TypeCode* const vnx_native_type_code_account_info_t = vnx::get_type_code(vnx::Hash64(0x5858a2f32468feaeull));
const vnx::TypeCode* const vnx_native_type_code_account_t = vnx::get_type_code(vnx::Hash64(0xc0c163f453729a7ull));
const vnx::TypeCode* const vnx_native_type_code_balance_t = vnx::get_type_code(vnx::Hash64(0x613173c7e5ce65b4ull));
const vnx::TypeCode* const vnx_native_type_code_block_index_t = vnx::get_type_code(vnx::Hash64(0xd00c722670bca900ull));
const vnx::TypeCode* const vnx_native_type_code_compile_flags_t = vnx::get_type_code(vnx::Hash64(0x2d1279b3d438d884ull));
const vnx::TypeCode* const vnx_native_type_code_error_code_e = vnx::get_type_code(vnx::Hash64(0xc3330407879f46ull));
const vnx::TypeCode* const vnx_native_type_code_exec_entry_t = vnx::get_type_code(vnx::Hash64(0xd30282844b1862a4ull));
const vnx::TypeCode* const vnx_native_type_code_exec_error_t = vnx::get_type_code(vnx::Hash64(0x5cd84f2d984d4bfull));
const vnx::TypeCode* const vnx_native_type_code_exec_result_t = vnx::get_type_code(vnx::Hash64(0x18fe02e2374b039eull));
const vnx::TypeCode* const vnx_native_type_code_farmed_block_info_t = vnx::get_type_code(vnx::Hash64(0x2e10154a52617b19ull));
const vnx::TypeCode* const vnx_native_type_code_farmed_block_summary_t = vnx::get_type_code(vnx::Hash64(0x9fe2bac01782721dull));
const vnx::TypeCode* const vnx_native_type_code_node_info_t = vnx::get_type_code(vnx::Hash64(0xda45b5e3a527588eull));
const vnx::TypeCode* const vnx_native_type_code_node_type_e = vnx::get_type_code(vnx::Hash64(0xa5de458f1ce5539aull));
const vnx::TypeCode* const vnx_native_type_code_offer_data_t = vnx::get_type_code(vnx::Hash64(0xc97a08a709a5f1efull));
const vnx::TypeCode* const vnx_native_type_code_peer_info_t = vnx::get_type_code(vnx::Hash64(0xce0ff32e89625afbull));
const vnx::TypeCode* const vnx_native_type_code_permission_e = vnx::get_type_code(vnx::Hash64(0x7d75a3f04c313898ull));
const vnx::TypeCode* const vnx_native_type_code_plot_nft_info_t = vnx::get_type_code(vnx::Hash64(0xf8e0b44f3c0a54aeull));
const vnx::TypeCode* const vnx_native_type_code_pooling_error_e = vnx::get_type_code(vnx::Hash64(0xec786b877a93f17ull));
const vnx::TypeCode* const vnx_native_type_code_pooling_info_t = vnx::get_type_code(vnx::Hash64(0xbddcc977498f516full));
const vnx::TypeCode* const vnx_native_type_code_pooling_stats_t = vnx::get_type_code(vnx::Hash64(0xb2441a254359df11ull));
const vnx::TypeCode* const vnx_native_type_code_query_filter_t = vnx::get_type_code(vnx::Hash64(0x92b02006aeea9a76ull));
const vnx::TypeCode* const vnx_native_type_code_spend_options_t = vnx::get_type_code(vnx::Hash64(0x37f7c6d377362e95ull));
const vnx::TypeCode* const vnx_native_type_code_swap_entry_t = vnx::get_type_code(vnx::Hash64(0xe3110712aa0f6064ull));
const vnx::TypeCode* const vnx_native_type_code_swap_info_t = vnx::get_type_code(vnx::Hash64(0x7586be908f15ae8ull));
const vnx::TypeCode* const vnx_native_type_code_swap_pool_info_t = vnx::get_type_code(vnx::Hash64(0x6502e235a743dabull));
const vnx::TypeCode* const vnx_native_type_code_swap_user_info_t = vnx::get_type_code(vnx::Hash64(0x1b6c720bff2d638cull));
const vnx::TypeCode* const vnx_native_type_code_trade_entry_t = vnx::get_type_code(vnx::Hash64(0xed7d8e67cb8db394ull));
const vnx::TypeCode* const vnx_native_type_code_trade_log_t = vnx::get_type_code(vnx::Hash64(0xafedf6853c645eb8ull));
const vnx::TypeCode* const vnx_native_type_code_tx_entry_t = vnx::get_type_code(vnx::Hash64(0x438cda5719015870ull));
const vnx::TypeCode* const vnx_native_type_code_tx_index_t = vnx::get_type_code(vnx::Hash64(0xc326e232ee2ebb41ull));
const vnx::TypeCode* const vnx_native_type_code_tx_info_t = vnx::get_type_code(vnx::Hash64(0x44e4a710953f4785ull));
const vnx::TypeCode* const vnx_native_type_code_tx_log_entry_t = vnx::get_type_code(vnx::Hash64(0xc29d95c24aff8b43ull));
const vnx::TypeCode* const vnx_native_type_code_tx_note_e = vnx::get_type_code(vnx::Hash64(0x347c1deca0a9c9cull));
const vnx::TypeCode* const vnx_native_type_code_tx_type_e = vnx::get_type_code(vnx::Hash64(0x3b7f577c2cfd4c91ull));
const vnx::TypeCode* const vnx_native_type_code_txin_t = vnx::get_type_code(vnx::Hash64(0xda6587114a2413full));
const vnx::TypeCode* const vnx_native_type_code_txio_entry_t = vnx::get_type_code(vnx::Hash64(0x2d1c65e166ab244bull));
const vnx::TypeCode* const vnx_native_type_code_txio_t = vnx::get_type_code(vnx::Hash64(0x32adb93b85c82cf4ull));
const vnx::TypeCode* const vnx_native_type_code_txout_t = vnx::get_type_code(vnx::Hash64(0xaa91772752216576ull));
const vnx::TypeCode* const vnx_native_type_code_uint_fraction_t = vnx::get_type_code(vnx::Hash64(0xe5632136b5a3ed5aull));
const vnx::TypeCode* const vnx_native_type_code_ulong_fraction_t = vnx::get_type_code(vnx::Hash64(0xe9c2388a9c35ce06ull));
const vnx::TypeCode* const vnx_native_type_code_virtual_plot_info_t = vnx::get_type_code(vnx::Hash64(0xcbcd7c49be95180eull));

} // namespace mmx
