
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_ProofServer_CLIENT_HXX_
#define INCLUDE_mmx_ProofServer_CLIENT_HXX_

#include <vnx/Client.h>
#include <mmx/hash_t.hpp>
#include <mmx/table_entry_t.hxx>
#include <vnx/Module.h>


namespace mmx {

class ProofServerClient : public vnx::Client {
public:
	ProofServerClient(const std::string& service_name);
	
	ProofServerClient(vnx::Hash64 service_addr);
	
	std::vector<::mmx::table_entry_t> compute(const std::vector<uint32_t>& X_values = {}, const ::mmx::hash_t& id = ::mmx::hash_t(), const int32_t& ksize = 0, const int32_t& xbits = 0);
	
	::vnx::Object vnx_get_config_object();
	
	::vnx::Variant vnx_get_config(const std::string& name = "");
	
	void vnx_set_config_object(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config_object_async(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	void vnx_set_config_async(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	::vnx::TypeCode vnx_get_type_code();
	
	std::shared_ptr<const ::vnx::ModuleInfo> vnx_get_module_info();
	
	void vnx_restart();
	
	void vnx_restart_async();
	
	void vnx_stop();
	
	void vnx_stop_async();
	
	vnx::bool_t vnx_self_test();
	
};


} // namespace mmx

#endif // INCLUDE_mmx_ProofServer_CLIENT_HXX_
