
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_ACCEPT_GENERIC_HXX_
#define INCLUDE_mmx_ACCEPT_GENERIC_HXX_

#include <mmx/Block.hxx>
#include <mmx/BlockHeader.hxx>
#include <mmx/ChainParams.hxx>
#include <mmx/Challenge.hxx>
#include <mmx/Contract.hxx>
#include <mmx/FarmInfo.hxx>
#include <mmx/Farmer_get_farm_info.hxx>
#include <mmx/Farmer_get_farm_info_return.hxx>
#include <mmx/Farmer_get_farmer_keys.hxx>
#include <mmx/Farmer_get_farmer_keys_return.hxx>
#include <mmx/Farmer_get_mac_addr.hxx>
#include <mmx/Farmer_get_mac_addr_return.hxx>
#include <mmx/Farmer_get_partial_diff.hxx>
#include <mmx/Farmer_get_partial_diff_return.hxx>
#include <mmx/Farmer_get_partial_diffs.hxx>
#include <mmx/Farmer_get_partial_diffs_return.hxx>
#include <mmx/Farmer_sign_block.hxx>
#include <mmx/Farmer_sign_block_return.hxx>
#include <mmx/Farmer_sign_vote.hxx>
#include <mmx/Farmer_sign_vote_return.hxx>
#include <mmx/Harvester_add_plot_dir.hxx>
#include <mmx/Harvester_add_plot_dir_return.hxx>
#include <mmx/Harvester_get_farm_info.hxx>
#include <mmx/Harvester_get_farm_info_return.hxx>
#include <mmx/Harvester_get_total_bytes.hxx>
#include <mmx/Harvester_get_total_bytes_return.hxx>
#include <mmx/Harvester_reload.hxx>
#include <mmx/Harvester_reload_return.hxx>
#include <mmx/Harvester_rem_plot_dir.hxx>
#include <mmx/Harvester_rem_plot_dir_return.hxx>
#include <mmx/IntervalRequest.hxx>
#include <mmx/KeyFile.hxx>
#include <mmx/LookupInfo.hxx>
#include <mmx/NetworkInfo.hxx>
#include <mmx/Node_add_block.hxx>
#include <mmx/Node_add_block_return.hxx>
#include <mmx/Node_add_transaction.hxx>
#include <mmx/Node_add_transaction_return.hxx>
#include <mmx/Node_call_contract.hxx>
#include <mmx/Node_call_contract_return.hxx>
#include <mmx/Node_dump_storage.hxx>
#include <mmx/Node_dump_storage_return.hxx>
#include <mmx/Node_fetch_offers.hxx>
#include <mmx/Node_fetch_offers_return.hxx>
#include <mmx/Node_get_all_balances.hxx>
#include <mmx/Node_get_all_balances_return.hxx>
#include <mmx/Node_get_balance.hxx>
#include <mmx/Node_get_balance_return.hxx>
#include <mmx/Node_get_balances.hxx>
#include <mmx/Node_get_balances_return.hxx>
#include <mmx/Node_get_block.hxx>
#include <mmx/Node_get_block_return.hxx>
#include <mmx/Node_get_block_at.hxx>
#include <mmx/Node_get_block_at_return.hxx>
#include <mmx/Node_get_block_hash.hxx>
#include <mmx/Node_get_block_hash_return.hxx>
#include <mmx/Node_get_block_hash_ex.hxx>
#include <mmx/Node_get_block_hash_ex_return.hxx>
#include <mmx/Node_get_contract.hxx>
#include <mmx/Node_get_contract_return.hxx>
#include <mmx/Node_get_contract_balances.hxx>
#include <mmx/Node_get_contract_balances_return.hxx>
#include <mmx/Node_get_contract_for.hxx>
#include <mmx/Node_get_contract_for_return.hxx>
#include <mmx/Node_get_contracts.hxx>
#include <mmx/Node_get_contracts_return.hxx>
#include <mmx/Node_get_contracts_by.hxx>
#include <mmx/Node_get_contracts_by_return.hxx>
#include <mmx/Node_get_contracts_owned_by.hxx>
#include <mmx/Node_get_contracts_owned_by_return.hxx>
#include <mmx/Node_get_exec_history.hxx>
#include <mmx/Node_get_exec_history_return.hxx>
#include <mmx/Node_get_farmed_block_summary.hxx>
#include <mmx/Node_get_farmed_block_summary_return.hxx>
#include <mmx/Node_get_farmed_blocks.hxx>
#include <mmx/Node_get_farmed_blocks_return.hxx>
#include <mmx/Node_get_farmer_ranking.hxx>
#include <mmx/Node_get_farmer_ranking_return.hxx>
#include <mmx/Node_get_genesis_hash.hxx>
#include <mmx/Node_get_genesis_hash_return.hxx>
#include <mmx/Node_get_header.hxx>
#include <mmx/Node_get_header_return.hxx>
#include <mmx/Node_get_header_at.hxx>
#include <mmx/Node_get_header_at_return.hxx>
#include <mmx/Node_get_height.hxx>
#include <mmx/Node_get_height_return.hxx>
#include <mmx/Node_get_history.hxx>
#include <mmx/Node_get_history_return.hxx>
#include <mmx/Node_get_history_memo.hxx>
#include <mmx/Node_get_history_memo_return.hxx>
#include <mmx/Node_get_network_info.hxx>
#include <mmx/Node_get_network_info_return.hxx>
#include <mmx/Node_get_offer.hxx>
#include <mmx/Node_get_offer_return.hxx>
#include <mmx/Node_get_offers.hxx>
#include <mmx/Node_get_offers_return.hxx>
#include <mmx/Node_get_offers_by.hxx>
#include <mmx/Node_get_offers_by_return.hxx>
#include <mmx/Node_get_params.hxx>
#include <mmx/Node_get_params_return.hxx>
#include <mmx/Node_get_plot_nft_info.hxx>
#include <mmx/Node_get_plot_nft_info_return.hxx>
#include <mmx/Node_get_plot_nft_target.hxx>
#include <mmx/Node_get_plot_nft_target_return.hxx>
#include <mmx/Node_get_recent_offers.hxx>
#include <mmx/Node_get_recent_offers_return.hxx>
#include <mmx/Node_get_recent_offers_for.hxx>
#include <mmx/Node_get_recent_offers_for_return.hxx>
#include <mmx/Node_get_swap_equivalent_liquidity.hxx>
#include <mmx/Node_get_swap_equivalent_liquidity_return.hxx>
#include <mmx/Node_get_swap_fees_earned.hxx>
#include <mmx/Node_get_swap_fees_earned_return.hxx>
#include <mmx/Node_get_swap_history.hxx>
#include <mmx/Node_get_swap_history_return.hxx>
#include <mmx/Node_get_swap_info.hxx>
#include <mmx/Node_get_swap_info_return.hxx>
#include <mmx/Node_get_swap_liquidity_by.hxx>
#include <mmx/Node_get_swap_liquidity_by_return.hxx>
#include <mmx/Node_get_swap_trade_estimate.hxx>
#include <mmx/Node_get_swap_trade_estimate_return.hxx>
#include <mmx/Node_get_swap_user_info.hxx>
#include <mmx/Node_get_swap_user_info_return.hxx>
#include <mmx/Node_get_swaps.hxx>
#include <mmx/Node_get_swaps_return.hxx>
#include <mmx/Node_get_synced_height.hxx>
#include <mmx/Node_get_synced_height_return.hxx>
#include <mmx/Node_get_synced_vdf_height.hxx>
#include <mmx/Node_get_synced_vdf_height_return.hxx>
#include <mmx/Node_get_total_balance.hxx>
#include <mmx/Node_get_total_balance_return.hxx>
#include <mmx/Node_get_total_balances.hxx>
#include <mmx/Node_get_total_balances_return.hxx>
#include <mmx/Node_get_total_supply.hxx>
#include <mmx/Node_get_total_supply_return.hxx>
#include <mmx/Node_get_trade_history.hxx>
#include <mmx/Node_get_trade_history_return.hxx>
#include <mmx/Node_get_trade_history_for.hxx>
#include <mmx/Node_get_trade_history_for_return.hxx>
#include <mmx/Node_get_transaction.hxx>
#include <mmx/Node_get_transaction_return.hxx>
#include <mmx/Node_get_transactions.hxx>
#include <mmx/Node_get_transactions_return.hxx>
#include <mmx/Node_get_tx_height.hxx>
#include <mmx/Node_get_tx_height_return.hxx>
#include <mmx/Node_get_tx_ids.hxx>
#include <mmx/Node_get_tx_ids_return.hxx>
#include <mmx/Node_get_tx_ids_at.hxx>
#include <mmx/Node_get_tx_ids_at_return.hxx>
#include <mmx/Node_get_tx_ids_since.hxx>
#include <mmx/Node_get_tx_ids_since_return.hxx>
#include <mmx/Node_get_tx_info.hxx>
#include <mmx/Node_get_tx_info_return.hxx>
#include <mmx/Node_get_tx_info_for.hxx>
#include <mmx/Node_get_tx_info_for_return.hxx>
#include <mmx/Node_get_vdf_height.hxx>
#include <mmx/Node_get_vdf_height_return.hxx>
#include <mmx/Node_get_vdf_peak.hxx>
#include <mmx/Node_get_vdf_peak_return.hxx>
#include <mmx/Node_read_storage.hxx>
#include <mmx/Node_read_storage_return.hxx>
#include <mmx/Node_read_storage_array.hxx>
#include <mmx/Node_read_storage_array_return.hxx>
#include <mmx/Node_read_storage_entry_addr.hxx>
#include <mmx/Node_read_storage_entry_addr_return.hxx>
#include <mmx/Node_read_storage_entry_string.hxx>
#include <mmx/Node_read_storage_entry_string_return.hxx>
#include <mmx/Node_read_storage_entry_var.hxx>
#include <mmx/Node_read_storage_entry_var_return.hxx>
#include <mmx/Node_read_storage_field.hxx>
#include <mmx/Node_read_storage_field_return.hxx>
#include <mmx/Node_read_storage_map.hxx>
#include <mmx/Node_read_storage_map_return.hxx>
#include <mmx/Node_read_storage_object.hxx>
#include <mmx/Node_read_storage_object_return.hxx>
#include <mmx/Node_read_storage_var.hxx>
#include <mmx/Node_read_storage_var_return.hxx>
#include <mmx/Node_revert_sync.hxx>
#include <mmx/Node_revert_sync_return.hxx>
#include <mmx/Node_start_sync.hxx>
#include <mmx/Node_start_sync_return.hxx>
#include <mmx/Node_validate.hxx>
#include <mmx/Node_validate_return.hxx>
#include <mmx/Node_verify_partial.hxx>
#include <mmx/Node_verify_partial_return.hxx>
#include <mmx/Node_verify_plot_nft_target.hxx>
#include <mmx/Node_verify_plot_nft_target_return.hxx>
#include <mmx/Operation.hxx>
#include <mmx/Partial.hxx>
#include <mmx/PeerInfo.hxx>
#include <mmx/PlotHeader.hxx>
#include <mmx/ProofOfSpace.hxx>
#include <mmx/ProofOfSpaceNFT.hxx>
#include <mmx/ProofOfSpaceOG.hxx>
#include <mmx/ProofOfTime.hxx>
#include <mmx/ProofResponse.hxx>
#include <mmx/ReceiveNote.hxx>
#include <mmx/Request.hxx>
#include <mmx/Return.hxx>
#include <mmx/Router_discover.hxx>
#include <mmx/Router_discover_return.hxx>
#include <mmx/Router_fetch_block.hxx>
#include <mmx/Router_fetch_block_return.hxx>
#include <mmx/Router_fetch_block_at.hxx>
#include <mmx/Router_fetch_block_at_return.hxx>
#include <mmx/Router_get_blocks_at.hxx>
#include <mmx/Router_get_blocks_at_return.hxx>
#include <mmx/Router_get_connected_peers.hxx>
#include <mmx/Router_get_connected_peers_return.hxx>
#include <mmx/Router_get_id.hxx>
#include <mmx/Router_get_id_return.hxx>
#include <mmx/Router_get_info.hxx>
#include <mmx/Router_get_info_return.hxx>
#include <mmx/Router_get_known_peers.hxx>
#include <mmx/Router_get_known_peers_return.hxx>
#include <mmx/Router_get_peer_info.hxx>
#include <mmx/Router_get_peer_info_return.hxx>
#include <mmx/Router_get_peers.hxx>
#include <mmx/Router_get_peers_return.hxx>
#include <mmx/Router_kick_peer.hxx>
#include <mmx/Router_kick_peer_return.hxx>
#include <mmx/Router_sign_msg.hxx>
#include <mmx/Router_sign_msg_return.hxx>
#include <mmx/Solution.hxx>
#include <mmx/TimeLord_stop_vdf.hxx>
#include <mmx/TimeLord_stop_vdf_return.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/TransactionBase.hxx>
#include <mmx/VDF_Point.hxx>
#include <mmx/ValidatorVote.hxx>
#include <mmx/Wallet_accept_offer.hxx>
#include <mmx/Wallet_accept_offer_return.hxx>
#include <mmx/Wallet_add_account.hxx>
#include <mmx/Wallet_add_account_return.hxx>
#include <mmx/Wallet_add_token.hxx>
#include <mmx/Wallet_add_token_return.hxx>
#include <mmx/Wallet_cancel_offer.hxx>
#include <mmx/Wallet_cancel_offer_return.hxx>
#include <mmx/Wallet_complete.hxx>
#include <mmx/Wallet_complete_return.hxx>
#include <mmx/Wallet_create_account.hxx>
#include <mmx/Wallet_create_account_return.hxx>
#include <mmx/Wallet_create_wallet.hxx>
#include <mmx/Wallet_create_wallet_return.hxx>
#include <mmx/Wallet_deploy.hxx>
#include <mmx/Wallet_deploy_return.hxx>
#include <mmx/Wallet_deposit.hxx>
#include <mmx/Wallet_deposit_return.hxx>
#include <mmx/Wallet_execute.hxx>
#include <mmx/Wallet_execute_return.hxx>
#include <mmx/Wallet_export_wallet.hxx>
#include <mmx/Wallet_export_wallet_return.hxx>
#include <mmx/Wallet_find_wallet_by_addr.hxx>
#include <mmx/Wallet_find_wallet_by_addr_return.hxx>
#include <mmx/Wallet_gather_inputs_for.hxx>
#include <mmx/Wallet_gather_inputs_for_return.hxx>
#include <mmx/Wallet_get_account.hxx>
#include <mmx/Wallet_get_account_return.hxx>
#include <mmx/Wallet_get_address.hxx>
#include <mmx/Wallet_get_address_return.hxx>
#include <mmx/Wallet_get_all_accounts.hxx>
#include <mmx/Wallet_get_all_accounts_return.hxx>
#include <mmx/Wallet_get_all_addresses.hxx>
#include <mmx/Wallet_get_all_addresses_return.hxx>
#include <mmx/Wallet_get_all_farmer_keys.hxx>
#include <mmx/Wallet_get_all_farmer_keys_return.hxx>
#include <mmx/Wallet_get_balance.hxx>
#include <mmx/Wallet_get_balance_return.hxx>
#include <mmx/Wallet_get_balances.hxx>
#include <mmx/Wallet_get_balances_return.hxx>
#include <mmx/Wallet_get_contract_balances.hxx>
#include <mmx/Wallet_get_contract_balances_return.hxx>
#include <mmx/Wallet_get_contracts.hxx>
#include <mmx/Wallet_get_contracts_return.hxx>
#include <mmx/Wallet_get_contracts_owned.hxx>
#include <mmx/Wallet_get_contracts_owned_return.hxx>
#include <mmx/Wallet_get_farmer_keys.hxx>
#include <mmx/Wallet_get_farmer_keys_return.hxx>
#include <mmx/Wallet_get_history.hxx>
#include <mmx/Wallet_get_history_return.hxx>
#include <mmx/Wallet_get_master_seed.hxx>
#include <mmx/Wallet_get_master_seed_return.hxx>
#include <mmx/Wallet_get_mnemonic_seed.hxx>
#include <mmx/Wallet_get_mnemonic_seed_return.hxx>
#include <mmx/Wallet_get_mnemonic_wordlist.hxx>
#include <mmx/Wallet_get_mnemonic_wordlist_return.hxx>
#include <mmx/Wallet_get_offers.hxx>
#include <mmx/Wallet_get_offers_return.hxx>
#include <mmx/Wallet_get_swap_liquidity.hxx>
#include <mmx/Wallet_get_swap_liquidity_return.hxx>
#include <mmx/Wallet_get_token_list.hxx>
#include <mmx/Wallet_get_token_list_return.hxx>
#include <mmx/Wallet_get_total_balances.hxx>
#include <mmx/Wallet_get_total_balances_return.hxx>
#include <mmx/Wallet_get_tx_log.hxx>
#include <mmx/Wallet_get_tx_log_return.hxx>
#include <mmx/Wallet_import_wallet.hxx>
#include <mmx/Wallet_import_wallet_return.hxx>
#include <mmx/Wallet_is_locked.hxx>
#include <mmx/Wallet_is_locked_return.hxx>
#include <mmx/Wallet_lock.hxx>
#include <mmx/Wallet_lock_return.hxx>
#include <mmx/Wallet_make_offer.hxx>
#include <mmx/Wallet_make_offer_return.hxx>
#include <mmx/Wallet_mark_spent.hxx>
#include <mmx/Wallet_mark_spent_return.hxx>
#include <mmx/Wallet_offer_trade.hxx>
#include <mmx/Wallet_offer_trade_return.hxx>
#include <mmx/Wallet_offer_withdraw.hxx>
#include <mmx/Wallet_offer_withdraw_return.hxx>
#include <mmx/Wallet_plotnft_create.hxx>
#include <mmx/Wallet_plotnft_create_return.hxx>
#include <mmx/Wallet_plotnft_exec.hxx>
#include <mmx/Wallet_plotnft_exec_return.hxx>
#include <mmx/Wallet_release.hxx>
#include <mmx/Wallet_release_return.hxx>
#include <mmx/Wallet_release_all.hxx>
#include <mmx/Wallet_release_all_return.hxx>
#include <mmx/Wallet_rem_token.hxx>
#include <mmx/Wallet_rem_token_return.hxx>
#include <mmx/Wallet_remove_account.hxx>
#include <mmx/Wallet_remove_account_return.hxx>
#include <mmx/Wallet_reserve.hxx>
#include <mmx/Wallet_reserve_return.hxx>
#include <mmx/Wallet_reset_cache.hxx>
#include <mmx/Wallet_reset_cache_return.hxx>
#include <mmx/Wallet_send.hxx>
#include <mmx/Wallet_send_return.hxx>
#include <mmx/Wallet_send_from.hxx>
#include <mmx/Wallet_send_from_return.hxx>
#include <mmx/Wallet_send_many.hxx>
#include <mmx/Wallet_send_many_return.hxx>
#include <mmx/Wallet_send_off.hxx>
#include <mmx/Wallet_send_off_return.hxx>
#include <mmx/Wallet_set_address_count.hxx>
#include <mmx/Wallet_set_address_count_return.hxx>
#include <mmx/Wallet_sign_msg.hxx>
#include <mmx/Wallet_sign_msg_return.hxx>
#include <mmx/Wallet_sign_off.hxx>
#include <mmx/Wallet_sign_off_return.hxx>
#include <mmx/Wallet_swap_add_liquid.hxx>
#include <mmx/Wallet_swap_add_liquid_return.hxx>
#include <mmx/Wallet_swap_rem_liquid.hxx>
#include <mmx/Wallet_swap_rem_liquid_return.hxx>
#include <mmx/Wallet_swap_trade.hxx>
#include <mmx/Wallet_swap_trade_return.hxx>
#include <mmx/Wallet_unlock.hxx>
#include <mmx/Wallet_unlock_return.hxx>
#include <mmx/Wallet_update_cache.hxx>
#include <mmx/Wallet_update_cache_return.hxx>
#include <mmx/WalletFile.hxx>
#include <mmx/WebAPI_shutdown.hxx>
#include <mmx/WebAPI_shutdown_return.hxx>
#include <mmx/tx_info_t.hxx>


namespace vnx {

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Block> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::BlockHeader> value) {
	if(value) {
		if(auto tmp = std::dynamic_pointer_cast<const ::mmx::Block>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else {
			value->accept_generic(visitor);
		}
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::ChainParams> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Challenge> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Contract> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::FarmInfo> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_get_farm_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_get_farm_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_get_farmer_keys> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_get_farmer_keys_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_get_mac_addr> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_get_mac_addr_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_get_partial_diff> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_get_partial_diff_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_get_partial_diffs> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_get_partial_diffs_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_sign_block> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_sign_block_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_sign_vote> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Farmer_sign_vote_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Harvester_add_plot_dir> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Harvester_add_plot_dir_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Harvester_get_farm_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Harvester_get_farm_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Harvester_get_total_bytes> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Harvester_get_total_bytes_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Harvester_reload> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Harvester_reload_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Harvester_rem_plot_dir> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Harvester_rem_plot_dir_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::IntervalRequest> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::KeyFile> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::LookupInfo> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::NetworkInfo> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_add_block> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_add_block_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_add_transaction> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_add_transaction_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_call_contract> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_call_contract_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_dump_storage> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_dump_storage_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_fetch_offers> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_fetch_offers_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_all_balances> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_all_balances_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_balance> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_balance_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_balances> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_balances_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_block> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_block_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_block_at> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_block_at_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_block_hash> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_block_hash_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_block_hash_ex> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_block_hash_ex_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contract> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contract_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contract_balances> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contract_balances_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contract_for> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contract_for_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contracts> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contracts_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contracts_by> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contracts_by_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contracts_owned_by> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_contracts_owned_by_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_exec_history> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_exec_history_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_farmed_block_summary> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_farmed_block_summary_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_farmed_blocks> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_farmed_blocks_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_farmer_ranking> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_farmer_ranking_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_genesis_hash> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_genesis_hash_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_header> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_header_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_header_at> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_header_at_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_height> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_height_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_history> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_history_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_history_memo> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_history_memo_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_network_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_network_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_offer> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_offer_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_offers> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_offers_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_offers_by> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_offers_by_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_params> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_params_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_plot_nft_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_plot_nft_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_plot_nft_target> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_plot_nft_target_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_recent_offers> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_recent_offers_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_recent_offers_for> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_recent_offers_for_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_equivalent_liquidity> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_equivalent_liquidity_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_fees_earned> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_fees_earned_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_history> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_history_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_liquidity_by> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_liquidity_by_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_trade_estimate> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_trade_estimate_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_user_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swap_user_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swaps> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_swaps_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_synced_height> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_synced_height_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_synced_vdf_height> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_synced_vdf_height_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_total_balance> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_total_balance_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_total_balances> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_total_balances_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_total_supply> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_total_supply_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_trade_history> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_trade_history_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_trade_history_for> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_trade_history_for_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_transaction> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_transaction_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_transactions> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_transactions_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_height> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_height_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_ids> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_ids_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_ids_at> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_ids_at_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_ids_since> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_ids_since_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_info_for> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_tx_info_for_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_vdf_height> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_vdf_height_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_vdf_peak> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_get_vdf_peak_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_array> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_array_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_entry_addr> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_entry_addr_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_entry_string> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_entry_string_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_entry_var> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_entry_var_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_field> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_field_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_map> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_map_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_object> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_object_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_var> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_read_storage_var_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_revert_sync> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_revert_sync_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_start_sync> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_start_sync_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_validate> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_validate_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_verify_partial> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_verify_partial_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_verify_plot_nft_target> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Node_verify_plot_nft_target_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Operation> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Partial> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::PeerInfo> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::PlotHeader> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::ProofOfSpace> value) {
	if(value) {
		if(auto tmp = std::dynamic_pointer_cast<const ::mmx::ProofOfSpaceNFT>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::mmx::ProofOfSpaceOG>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else {
			value->accept_generic(visitor);
		}
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::ProofOfSpaceNFT> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::ProofOfSpaceOG> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::ProofOfTime> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::ProofResponse> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::ReceiveNote> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Request> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_discover> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_discover_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_fetch_block> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_fetch_block_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_fetch_block_at> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_fetch_block_at_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_blocks_at> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_blocks_at_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_connected_peers> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_connected_peers_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_id> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_id_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_known_peers> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_known_peers_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_peer_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_peer_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_peers> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_get_peers_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_kick_peer> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_kick_peer_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_sign_msg> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Router_sign_msg_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Solution> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::TimeLord_stop_vdf> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::TimeLord_stop_vdf_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Transaction> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::TransactionBase> value) {
	if(value) {
		if(auto tmp = std::dynamic_pointer_cast<const ::mmx::Transaction>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else {
			value->accept_generic(visitor);
		}
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::VDF_Point> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::ValidatorVote> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_accept_offer> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_accept_offer_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_add_account> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_add_account_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_add_token> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_add_token_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_cancel_offer> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_cancel_offer_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_complete> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_complete_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_create_account> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_create_account_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_create_wallet> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_create_wallet_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_deploy> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_deploy_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_deposit> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_deposit_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_execute> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_execute_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_export_wallet> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_export_wallet_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_find_wallet_by_addr> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_find_wallet_by_addr_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_gather_inputs_for> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_gather_inputs_for_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_account> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_account_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_address> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_address_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_all_accounts> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_all_accounts_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_all_addresses> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_all_addresses_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_all_farmer_keys> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_all_farmer_keys_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_balance> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_balance_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_balances> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_balances_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_contract_balances> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_contract_balances_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_contracts> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_contracts_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_contracts_owned> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_contracts_owned_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_farmer_keys> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_farmer_keys_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_history> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_history_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_master_seed> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_master_seed_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_mnemonic_seed> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_mnemonic_seed_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_mnemonic_wordlist> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_mnemonic_wordlist_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_offers> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_offers_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_swap_liquidity> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_swap_liquidity_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_token_list> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_token_list_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_total_balances> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_total_balances_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_tx_log> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_get_tx_log_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_import_wallet> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_import_wallet_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_is_locked> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_is_locked_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_lock> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_lock_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_make_offer> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_make_offer_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_mark_spent> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_mark_spent_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_offer_trade> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_offer_trade_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_offer_withdraw> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_offer_withdraw_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_plotnft_create> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_plotnft_create_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_plotnft_exec> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_plotnft_exec_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_release> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_release_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_release_all> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_release_all_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_rem_token> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_rem_token_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_remove_account> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_remove_account_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_reserve> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_reserve_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_reset_cache> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_reset_cache_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_send> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_send_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_send_from> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_send_from_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_send_many> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_send_many_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_send_off> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_send_off_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_set_address_count> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_set_address_count_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_sign_msg> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_sign_msg_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_sign_off> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_sign_off_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_swap_add_liquid> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_swap_add_liquid_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_swap_rem_liquid> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_swap_rem_liquid_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_swap_trade> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_swap_trade_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_unlock> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_unlock_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_update_cache> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::Wallet_update_cache_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::WalletFile> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::WebAPI_shutdown> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::WebAPI_shutdown_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::tx_info_t> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}



} // namespace vnx

#endif // INCLUDE_mmx_ACCEPT_GENERIC_HXX_
